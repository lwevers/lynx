import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Code for the Lynx3 bot that won the Codecup competition for the game Poly-Y.
 *  This code implements monte carlo tree search with the AMAF heuristic and pattern detection
 *  If you are unfamiliar with these techniques, I suggest you read the following:
 *   - MCTS: http://en.wikipedia.org/wiki/Monte-Carlo_tree_search
 *   - MCTS in Hex: http://webdocs.cs.ualberta.ca/~hayward/papers/mcts-hex.pdf
 *   - AMAF: http://users.soe.ucsc.edu/~dph/mypubs/AMAFpaperWithRef.pdf
 *   
 * Hereby you have permission to do whatever you want with this code.
 * 
 * @author Lesley Wevers & Steven te Brinke
 */

public class Lynx3 {
	// Simulation heuristics parameters
	private static final int EDGE_BIAS_THRESHOLD = 50;	// Avoid playing at the edge for this number of simulation steps
	
	// Tree search parameters
	private static final int SAMPLES = 32;				// Number of samples at tree nodes, has a huge effect on performance
	private static final double ALPHA = 0.75;			// Blending parameter for AMAF samples and actual samples in the computation of the score of a node
	
	// Timing parameters
	private static final double TOTAL_TIME = 20.0;		// Maximum amount of time that may be used for a game (actual time may be higher)
	private static final int TIME_DIVIDER = 10;			// The remaining time is divided by this number to determine the time for the current move
	private static final double MINIMUM_TIME = 0.1;		// The minimum amount of time used for a move
	
	public static final int POSITIONS = 106;			// Total number of positions on the board
	
	// Masks for the 'edges' array
	public static final int TOP_LEFT_EDGE = 1;			
	public static final int BOT_LEFT_EDGE = 2;
	public static final int BOT_EDGE = 4;
	public static final int BOT_RIGHT_EDGE = 8;
	public static final int TOP_RIGHT_EDGE = 16;
	
	// Masks for the 'corners' array
	public static final int TOP_CORNER = 1;
	public static final int TOP_LEFT_CORNER = 2;
	public static final int BOT_LEFT_CORNER = 4;
	public static final int BOT_RIGHT_CORNER = 8;
	public static final int TOP_RIGHT_CORNER = 16;
	
	// Determines whether we win with a given set of captured corners
	 // Given a set of captured corners encoded as the bitmask i, win[i] is true if this set of captured corners is winning, otherwise win[i] is false
	public static final boolean[] win = {false,false,false,false,false,false,false,true,false,false,false,true,false,true,true,true,false,false,false,true,false,true,true,true,false,true,true,true,true,true,true,true};
	
	// Corner masks for a given edge mask, determines which corners we captured given a set of edges
	 // Given a set of edges encoded as a bitmask i, cornerSet[i] gives the corners captured by a component that connects these edges
	public static final int[] cornerSet = {0,0,0,0,0,0,0,6,0,0,0,2,0,8,12,14,0,0,0,3,0,1,4,7,0,17,16,19,24,25,28,31};
	
	// A list of board positions that are on the edge of the playing board
	// We only use this to find connections between edges in the 'winner' method, as we dont need to check from every edge, this array only contains the moves from three edges
	public static final int[] edge = {1,4,9,16,25,36,49,2,5,10,17,26,37,61,72,82,91,99,106};
	
	// The neighbour positions of each positions in either clockwise or counter-clockwise order 
	public static final int[][] neighbours = {null,{4,3,2},{5,6,3,1},{1,2,6,7,8,4},{9,8,3,1},{10,11,6,2},{2,3,7,12,11,5},{3,6,12,13,14,8},{3,4,9,15,14,7},{4,8,15,16},{5,11,18,17},{19,18,10,5,6,12},{19,20,13,7,6,11},{21,20,12,7,14,22},{23,22,13,7,8,15},{16,24,23,14,8,9},{9,15,24,25},{26,27,18,10},{17,27,28,19,11,10},{18,11,12,20,29,28},{19,29,30,21,13,12},{32,22,13,20,30,31},{32,33,23,14,13,21},{34,33,22,14,15,24},{34,35,25,16,15,23},{36,35,24,16},{37,38,27,17},{17,18,28,39,38,26},{19,18,27,39,40,29},{19,20,30,41,40,28},{21,20,29,41,42,31},{32,21,30,42,43,44},{33,22,21,31,44,45},{34,23,22,32,45,46},{35,24,23,33,46,47},{34,24,25,36,48,47},{25,35,48,49},{26,38,50},{51,50,37,26,27,39},{51,38,27,28,40,52},{39,52,53,41,29,28},{54,53,40,29,30,42},{55,54,41,30,31,43},{55,42,31,44,56},{32,31,43,56,57,45},{32,33,46,58,57,44},{34,33,45,58,59,47},{34,35,48,60,59,46},{35,36,49,61,60,47},{61,48,36},{62,51,38,37},{50,38,39,52,63,62},{51,39,40,53,64,63},{64,65,54,41,40,52},{55,66,65,53,41,42},{54,66,67,56,43,42},{68,67,55,43,44,57},{68,69,58,45,44,56},{69,70,59,46,45,57},{70,71,60,47,46,58},{71,59,47,48,61,72},{72,60,48,49},{73,63,51,50},{51,52,64,74,73,62},{65,53,52,63,74,75},{64,53,54,66,76,75},{55,54,65,76,77,67},{68,78,77,66,55,56},{69,57,56,67,78,79},{68,57,58,70,80,79},{69,80,81,71,59,58},{70,81,82,72,60,59},{61,60,71,82},{62,63,74,83},{84,83,73,63,64,75},{85,84,74,64,65,76},{85,86,77,66,65,75},{87,86,76,66,67,78},{68,67,77,87,88,79},{68,69,80,89,88,78},{69,70,81,90,89,79},{70,71,82,91,90,80},{91,81,71,72},{73,74,84,92},{85,93,92,83,74,75},{84,93,94,86,76,75},{85,76,77,87,95,94},{86,77,78,88,96,95},{87,96,97,89,79,78},{98,97,88,79,80,90},{98,99,91,81,80,89},{82,81,90,99},{83,84,93,100},{85,84,92,100,101,94},{85,86,95,102,101,93},{102,103,96,87,86,94},{103,95,87,88,97,104},{98,89,88,96,104,105},{99,106,105,97,89,90},{91,90,98,106},{92,93,101},{100,93,94,102},{101,94,95,103},{104,96,95,102},{105,97,96,103},{104,97,98,106},{105,98,99}};
	
	// The edge mask of the edges a position is connected to
	 // edges[i] is an edge mask that encodes the set of a edges to which position i is adjacent
	public static final int[] edges = {0,17,1,0,16,1,0,0,0,16,1,0,0,0,0,0,16,1,0,0,0,0,0,0,0,16,1,0,0,0,0,0,0,0,0,0,16,3,0,0,0,0,0,0,0,0,0,0,0,24,2,0,0,0,0,0,0,0,0,0,0,8,2,0,0,0,0,0,0,0,0,0,8,2,0,0,0,0,0,0,0,0,8,2,0,0,0,0,0,0,0,8,2,0,0,0,0,0,0,8,6,4,4,4,4,4,12};
	
	// The distance of a position from the edge
	 // edgeDistance[i] is the smallest number of positions between position i and the edge
	public static final int[] edgeDistance = {0,0,0,1,0,0,1,2,1,0,0,1,2,3,2,1,0,0,1,2,3,4,3,2,1,0,0,1,2,3,4,5,4,3,2,1,0,0,1,2,3,4,5,6,5,4,3,2,1,0,0,1,2,3,4,5,5,4,3,2,1,0,0,1,2,3,4,4,4,3,2,1,0,0,1,2,3,3,3,3,2,1,0,0,1,2,2,2,2,2,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0};
	
	// Patterns for the monte carlo simulation
	 // patterns[i] encodes the patterns that must be checked when the opponent has played position i in the previous simulation step
	 // The patterns for a position are encoded in an array, where one pattern consists of four longs:
	 // 1 & 2: A bit mask encoding a set of positions that all must belong to us
	 // 3 & 4: A bit mask encoding a set of positions of which none may belong to the opponent
	 // The high 16 bits of the last long encode the position that we must play if the pattern matches
	// Currently there are two patterns encoded:
	 // Bridges: If the opponent plays in a bridge belonging to us, we will defend that bridge by connecting it
	 // A primitive edge connection pattern: If a position of us is less than three steps away from the edge and the opponent plays below us (a neighbour of our position that is one step away from the edge),
	 //  then we play next to the position of the opponent below our move, but only if the two positions below the move that we play do not belong to the opponent
	 // Note that we have experimented with more 'correct' edge connection patterns, but we found that this only resulted in weaker play 
	private static final long[][] patterns = {null,{8L,0L,16L,1125899906842624L,8L,0L,4L,562949953421312L},{64L,0L,32L,1407374883553280L,8L,0L,2L,281474976710656L},{128L,0L,30L,844424930131968L,128L,0L,100L,1688849860263936L,128L,0L,784L,2251799813685248L,66L,0L,4L,562949953421312L,132L,0L,64L,1688849860263936L,320L,0L,128L,1970324836974592L,144L,0L,256L,2251799813685248L,258L,0L,16L,1125899906842624L,20L,0L,2L,281474976710656L},{256L,0L,512L,2533274790395904L,8L,0L,2L,281474976710656L},{2048L,0L,1024L,2814749767106560L,64L,0L,4L,562949953421312L},{128L,0L,30L,844424930131968L,128L,0L,100L,1688849860263936L,128L,0L,784L,2251799813685248L,4096L,0L,100L,1688849860263936L,4096L,0L,3104L,3096224743817216L,132L,0L,8L,844424930131968L,4104L,0L,128L,1970324836974592L,2176L,0L,4096L,3377699720527872L,4128L,0L,2048L,3096224743817216L,2052L,0L,32L,1407374883553280L,40L,0L,4L,562949953421312L},{8192L,0L,456L,1970324836974592L,8192L,0L,6208L,3377699720527872L,8192L,0L,49408L,3940649673949184L,4104L,0L,64L,1688849860263936L,8256L,0L,4096L,3377699720527872L,20480L,0L,8192L,3659174697238528L,8448L,0L,16384L,3940649673949184L,16392L,0L,256L,2251799813685248L,320L,0L,8L,844424930131968L},{16384L,0L,784L,2251799813685248L,16384L,0L,98816L,4222124650659840L,128L,0L,30L,844424930131968L,128L,0L,100L,1688849860263936L,128L,0L,784L,2251799813685248L,520L,0L,16L,1125899906842624L,32784L,0L,512L,2533274790395904L,16896L,0L,32768L,4222124650659840L,32896L,0L,16384L,3940649673949184L,16392L,0L,128L,1970324836974592L,144L,0L,8L,844424930131968L},{256L,0L,16L,1125899906842624L,32768L,0L,65536L,4503599627370496L},{2048L,0L,32L,1407374883553280L,262144L,0L,131072L,4785074604081152L},{524288L,0L,394240L,5066549580791808L,524288L,0L,3104L,3096224743817216L,4096L,0L,100L,1688849860263936L,4096L,0L,3104L,3096224743817216L,525312L,0L,262144L,5066549580791808L,262176L,0L,1024L,2814749767106560L,1088L,0L,32L,1407374883553280L,4128L,0L,64L,1688849860263936L,524352L,0L,4096L,3377699720527872L,266240L,0L,524288L,5348024557502464L},{1048576L,0L,788480L,5348024557502464L,1048576L,0L,6208L,3377699720527872L,8192L,0L,456L,1970324836974592L,8192L,0L,6208L,3377699720527872L,8192L,0L,49408L,3940649673949184L,532480L,0L,1048576L,5629499534213120L,1048704L,0L,8192L,3659174697238528L,8256L,0L,128L,1970324836974592L,2176L,0L,64L,1688849860263936L,524352L,0L,2048L,3096224743817216L,1050624L,0L,524288L,5348024557502464L},{2101248L,0L,1048576L,5629499534213120L,1048704L,0L,4096L,3377699720527872L,20480L,0L,128L,1970324836974592L,4194432L,0L,16384L,3940649673949184L,2113536L,0L,4194304L,6192449487634432L,5242880L,0L,2097152L,5910974510923776L},{4194304L,0L,25198592L,6473924464345088L,4194304L,0L,49408L,3940649673949184L,8192L,0L,456L,1970324836974592L,8192L,0L,6208L,3377699720527872L,8192L,0L,49408L,3940649673949184L,8396800L,0L,4194304L,6192449487634432L,4194432L,0L,8192L,3659174697238528L,8448L,0L,128L,1970324836974592L,32896L,0L,256L,2251799813685248L,8388864L,0L,32768L,4222124650659840L,4227072L,0L,8388608L,6473924464345088L},{8388608L,0L,50397184L,6755399441055744L,8388608L,0L,98816L,4222124650659840L,16384L,0L,784L,2251799813685248L,16384L,0L,98816L,4222124650659840L,8454144L,0L,16777216L,6755399441055744L,16793600L,0L,8388608L,6473924464345088L,8388864L,0L,16384L,3940649673949184L,16896L,0L,256L,2251799813685248L,65792L,0L,512L,2533274790395904L,16777728L,0L,65536L,4503599627370496L},{32768L,0L,512L,2533274790395904L,16777216L,0L,33554432L,7036874417766400L},{134217728L,0L,67108864L,7318349394477056L,262144L,0L,1024L,2814749767106560L},{268435456L,0L,394240L,5066549580791808L,268435456L,0L,201457664L,7599824371187712L,524288L,0L,394240L,5066549580791808L,524288L,0L,3104L,3096224743817216L,268566528L,0L,134217728L,7599824371187712L,134742016L,0L,268435456L,7881299347898368L,268437504L,0L,524288L,5348024557502464L,525312L,0L,2048L,3096224743817216L,133120L,0L,1024L,2814749767106560L,134218752L,0L,131072L,4785074604081152L},{1048576L,0L,788480L,5348024557502464L,1048576L,0L,6208L,3377699720527872L,536870912L,0L,788480L,5348024557502464L,536870912L,0L,402915328L,7881299347898368L,266240L,0L,2048L,3096224743817216L,1050624L,0L,4096L,3377699720527872L,536875008L,0L,1048576L,5629499534213120L,269484032L,0L,536870912L,8162774324609024L,537133056L,0L,268435456L,7881299347898368L,268437504L,0L,262144L,5066549580791808L},{1074266112L,0L,536870912L,8162774324609024L,538968064L,0L,1073741824L,8444249301319680L,1073750016L,0L,2097152L,5910974510923776L,2101248L,0L,8192L,3659174697238528L,532480L,0L,4096L,3377699720527872L,536875008L,0L,524288L,5348024557502464L},{4294975488L,0L,4194304L,6192449487634432L,5242880L,0L,8192L,3659174697238528L,1073750016L,0L,1048576L,5629499534213120L,2148532224L,0L,1073741824L,8444249301319680L,5368709120L,0L,2147483648L,8725724278030336L,2151677952L,0L,4294967296L,9007199254740992L},{4303355904L,0L,8589934592L,9288674231451648L,8589950976L,0L,8388608L,6473924464345088L,8396800L,0L,16384L,3940649673949184L,2113536L,0L,8192L,3659174697238528L,4294975488L,0L,2097152L,5910974510923776L,8592031744L,0L,4294967296L,9007199254740992L},{8589934592L,0L,51556384768L,9570149208162304L,8589934592L,0L,25198592L,6473924464345088L,4194304L,0L,25198592L,6473924464345088L,4194304L,0L,49408L,3940649673949184L,17184063488L,0L,8589934592L,9288674231451648L,8589950976L,0L,4194304L,6192449487634432L,4227072L,0L,16384L,3940649673949184L,16793600L,0L,32768L,4222124650659840L,17179901952L,0L,16777216L,6755399441055744L,8606711808L,0L,17179869184L,9570149208162304L},{17179869184L,0L,103112769536L,9851624184872960L,17179869184L,0L,50397184L,6755399441055744L,8388608L,0L,50397184L,6755399441055744L,8388608L,0L,98816L,4222124650659840L,17213423616L,0L,34359738368L,9851624184872960L,34359803904L,0L,33554432L,7036874417766400L,33587200L,0L,65536L,4503599627370496L,8454144L,0L,32768L,4222124650659840L,17179901952L,0L,8388608L,6473924464345088L,34368126976L,0L,17179869184L,9570149208162304L},{34359738368L,0L,68719476736L,10133099161583616L,16777216L,0L,65536L,4503599627370496L},{274877906944L,0L,137438953472L,10414574138294272L,134217728L,0L,131072L,4785074604081152L},{268435456L,0L,394240L,5066549580791808L,268435456L,0L,201457664L,7599824371187712L,549755813888L,0L,4615063718147915776L,14355223812243456L,549755813888L,0L,1126312290811904L,10696049115004928L,549755813888L,0L,201457664L,7599824371187712L,268566528L,0L,262144L,5066549580791808L,549756076032L,0L,268435456L,7881299347898368L,275146342400L,0L,549755813888L,10977524091715584L,549822922752L,0L,274877906944L,10696049115004928L,274878038016L,0L,67108864L,7318349394477056L,67371008L,0L,131072L,4785074604081152L},{1099511627776L,0L,2252624581623808L,10977524091715584L,1099511627776L,0L,-9216616637413720064L,14636698788954112L,1099511627776L,0L,402915328L,7881299347898368L,536870912L,0L,788480L,5348024557502464L,536870912L,0L,402915328L,7881299347898368L,134742016L,0L,262144L,5066549580791808L,549756076032L,0L,134217728L,7599824371187712L,1099645845504L,0L,549755813888L,10977524091715584L,550292684800L,0L,1099511627776L,11258999068426240L,1099512152064L,0L,536870912L,8162774324609024L,537133056L,0L,524288L,5348024557502464L},{1074266112L,0L,1048576L,5629499534213120L,2199024304128L,0L,1073741824L,8444249301319680L,1100585369600L,0L,2199023255552L,11540474045136896L,2199291691008L,0L,1099511627776L,11258999068426240L,1099512152064L,0L,268435456L,7881299347898368L,269484032L,0L,524288L,5348024557502464L},{538968064L,0L,1048576L,5629499534213120L,2199024304128L,0L,536870912L,8162774324609024L,4398583382016L,0L,2199023255552L,11540474045136896L,2201170739200L,0L,4398046511104L,11821949021847552L,4398048608256L,0L,2147483648L,8725724278030336L,2148532224L,0L,2097152L,5910974510923776L},{5368709120L,0L,2097152L,5910974510923776L,4398048608256L,0L,1073741824L,8444249301319680L,8797166764032L,0L,4398046511104L,11821949021847552L,21990232555520L,0L,8796093022208L,12103423998558208L,8800387989504L,0L,17592186044416L,12384898975268864L,17592188141568L,0L,4294967296L,9007199254740992L},{8592031744L,0L,4194304L,6192449487634432L,2151677952L,0L,2097152L,5910974510923776L,17592188141568L,0L,2147483648L,8725724278030336L,35186519572480L,0L,17592186044416L,12384898975268864L,17600775979008L,0L,35184372088832L,12666373951979520L,35184376283136L,0L,8589934592L,9288674231451648L},{17184063488L,0L,8388608L,6473924464345088L,4303355904L,0L,4194304L,6192449487634432L,35184376283136L,0L,4294967296L,9007199254740992L,70373039144960L,0L,35184372088832L,12666373951979520L,35201551958016L,0L,70368744177664L,12947848928690176L,70368752566272L,0L,17179869184L,9570149208162304L},{8589934592L,0L,51556384768L,9570149208162304L,8589934592L,0L,25198592L,6473924464345088L,70368744177664L,0L,51556384768L,9570149208162304L,70368744177664L,0L,1729382256910270464L,16607023625928832L,70368744177664L,0L,1153343751431651328L,13229323905400832L,34368126976L,0L,16777216L,6755399441055744L,8606711808L,0L,8388608L,6473924464345088L,70368752566272L,0L,8589934592L,9288674231451648L,140746078289920L,0L,70368744177664L,12947848928690176L,70403103916032L,0L,140737488355328L,13229323905400832L,140737505132544L,0L,34359738368L,9851624184872960L},{17179869184L,0L,103112769536L,9851624184872960L,17179869184L,0L,50397184L,6755399441055744L,140737488355328L,0L,103112769536L,9851624184872960L,140737488355328L,0L,2306687502863302656L,13510798882111488L,140737488355328L,0L,3458764513820540928L,16888498602639616L,17213423616L,0L,16777216L,6755399441055744L,68736253952L,0L,33554432L,7036874417766400L,281475010265088L,0L,68719476736L,10133099161583616L,140806207832064L,0L,281474976710656L,13510798882111488L,281492156579840L,0L,140737488355328L,13229323905400832L,140737505132544L,0L,17179869184L,9570149208162304L},{34359738368L,0L,33554432L,7036874417766400L,281474976710656L,0L,562949953421312L,13792273858822144L},{274877906944L,0L,67108864L,7318349394477056L,274877906944L,0L,1125899906842624L,14073748835532800L},{549755813888L,0L,4615063718147915776L,14355223812243456L,549755813888L,0L,1126312290811904L,10696049115004928L,549755813888L,0L,201457664L,7599824371187712L,2251937252638720L,0L,1125899906842624L,14073748835532800L,1125899973951488L,0L,137438953472L,10414574138294272L,137573171200L,0L,67108864L,7318349394477056L,549822922752L,0L,134217728L,7599824371187712L,2251799947902976L,0L,549755813888L,10977524091715584L,1126449662656512L,0L,2251799813685248L,14355223812243456L},{1099511627776L,0L,2252624581623808L,10977524091715584L,1099511627776L,0L,-9216616637413720064L,14636698788954112L,1099511627776L,0L,402915328L,7881299347898368L,2251799947902976L,0L,274877906944L,10696049115004928L,275146342400L,0L,134217728L,7599824371187712L,1099645845504L,0L,268435456L,7881299347898368L,4503599895805952L,0L,1099511627776L,11258999068426240L,2252899325313024L,0L,4503599627370496L,14636698788954112L,4503874505277440L,0L,2251799813685248L,14355223812243456L},{9007749010554880L,0L,4503599627370496L,14636698788954112L,4505798650626048L,0L,9007199254740992L,14918173765664768L,9007199791611904L,0L,2199023255552L,11540474045136896L,2199291691008L,0L,536870912L,8162774324609024L,550292684800L,0L,268435456L,7881299347898368L,4503599895805952L,0L,549755813888L,10977524091715584L},{18015498021109760L,0L,9007199254740992L,14918173765664768L,9007199791611904L,0L,1099511627776L,11258999068426240L,1100585369600L,0L,536870912L,8162774324609024L,4398583382016L,0L,1073741824L,8444249301319680L,18014399583223808L,0L,4398046511104L,11821949021847552L,9011597301252096L,0L,18014398509481984L,15199648742375424L},{36030996042219520L,0L,18014398509481984L,15199648742375424L,18014399583223808L,0L,2199023255552L,11540474045136896L,2201170739200L,0L,1073741824L,8444249301319680L,8797166764032L,0L,2147483648L,8725724278030336L,36028799166447616L,0L,8796093022208L,12103423998558208L,18023194602504192L,0L,36028797018963968L,15481123719086080L},{36028799166447616L,0L,4398046511104L,11821949021847552L,21990232555520L,0L,2147483648L,8725724278030336L,72057596185411584L,0L,17592186044416L,12384898975268864L,36046389205008384L,0L,72057594037927936L,15762598695796736L,72061992084439040L,0L,36028797018963968L,15481123719086080L},{8800387989504L,0L,2147483648L,8725724278030336L,72057596185411584L,0L,8796093022208L,12103423998558208L,144123984168878080L,0L,72057594037927936L,15762598695796736L,72092778410016768L,0L,144115188075855872L,16044073672507392L,144115192370823168L,0L,35184372088832L,12666373951979520L,35186519572480L,0L,4294967296L,9007199254740992L},{70373039144960L,0L,8589934592L,9288674231451648L,288230384741646336L,0L,70368744177664L,12947848928690176L,144185556820033536L,0L,288230376151711744L,16325548649218048L,288247968337756160L,0L,144115188075855872L,16044073672507392L,144115192370823168L,0L,17592186044416L,12384898975268864L,17600775979008L,0L,4294967296L,9007199254740992L},{35201551958016L,0L,8589934592L,9288674231451648L,288230384741646336L,0L,35184372088832L,12666373951979520L,576495936675512320L,0L,288230376151711744L,16325548649218048L,288371113640067072L,0L,576460752303423488L,16607023625928704L,576460769483292672L,0L,140737488355328L,13229323905400832L,140746078289920L,0L,17179869184L,9570149208162304L},{70368744177664L,0L,51556384768L,9570149208162304L,70368744177664L,0L,1729382256910270464L,16607023625928832L,70368744177664L,0L,1153343751431651328L,13229323905400832L,281492156579840L,0L,34359738368L,9851624184872960L,1152921538966585344L,0L,281474976710656L,13510798882111488L,576742227280134144L,0L,1152921504606846976L,16888498602639360L,1152991873351024640L,0L,576460752303423488L,16607023625928704L,576460769483292672L,0L,70368744177664L,12947848928690176L,70403103916032L,0L,17179869184L,9570149208162304L},{140737488355328L,0L,103112769536L,9851624184872960L,140737488355328L,0L,2306687502863302656L,13510798882111488L,140737488355328L,0L,3458764513820540928L,16888498602639616L,562984313159680L,0L,68719476736L,10133099161583616L,2305843077933170688L,0L,562949953421312L,13792273858822144L,1153484454560268288L,0L,2305843009213693952L,17169973579350016L,2305983746702049280L,0L,1152921504606846976L,16888498602639360L,1152921538966585344L,0L,140737488355328L,13229323905400832L,140806207832064L,0L,34359738368L,9851624184872960L},{281474976710656L,0L,2305843009213693952L,17169973579350016L,281474976710656L,0L,68719476736L,10133099161583616L},{2251799813685248L,0L,4611686018427387904L,17451448556060672L,274877906944L,0L,137438953472L,10414574138294272L},{549755813888L,0L,4615063718147915776L,14355223812243456L,549755813888L,0L,1126312290811904L,10696049115004928L,549755813888L,0L,201457664L,7599824371187712L,4503599627370496L,0L,4615063718147915776L,14355223812243456L,4503599627370496L,0L,-4611686018427387904L,17732923532771840L,1126449662656512L,0L,274877906944L,10696049115004928L,4503874505277440L,0L,549755813888L,10977524091715584L,-9223371487098961920L,0L,4503599627370496L,14636698788954112L,4616189618054758400L,0L,-9223372036854775808L,17732923532771328L,-9222246136947933184L,0L,4611686018427387904L,17451448556060672L,4611686293305294848L,0L,1125899906842624L,14073748835532800L},{1099511627776L,0L,2252624581623808L,10977524091715584L,1099511627776L,0L,-9216616637413720064L,14636698788954112L,1099511627776L,0L,402915328L,7881299347898368L,9007199254740992L,0L,-9223372036854775808L,18014398509483009L,9007199254740992L,0L,-9216616637413720064L,14636698788954112L,2252899325313024L,0L,549755813888L,10977524091715584L,9007749010554880L,0L,1099511627776L,11258999068426240L,1099511627776L,1L,9007199254740992L,14918173765664768L,-9214364837600034816L,0L,0L,18014398509481985L,2251799813685248L,1L,-9223372036854775808L,17732923532771328L,-9223371487098961920L,0L,2251799813685248L,14355223812243456L},{18014398509481984L,1L,0L,18295873486192642L,2199023255552L,2L,18014398509481984L,15199648742375424L,18015498021109760L,0L,2199023255552L,11540474045136896L,4505798650626048L,0L,1099511627776L,11258999068426240L,1099511627776L,1L,4503599627370496L,14636698788954112L,4503599627370496L,2L,0L,18014398509481985L},{36028797018963968L,2L,0L,18577348462903300L,9007199254740992L,4L,0L,18295873486192642L,2199023255552L,2L,9007199254740992L,14918173765664768L,9011597301252096L,0L,2199023255552L,11540474045136896L,36030996042219520L,0L,4398046511104L,11821949021847552L,4398046511104L,4L,36028797018963968L,15481123719086080L},{18014398509481984L,8L,0L,18577348462903300L,72057594037927936L,4L,0L,18858823439613960L,8796093022208L,8L,72057594037927936L,15762598695796736L,72061992084439040L,0L,8796093022208L,12103423998558208L,18023194602504192L,0L,4398046511104L,11821949021847552L,4398046511104L,4L,18014398509481984L,15199648742375424L},{36028797018963968L,16L,0L,18858823439613960L,8796093022208L,8L,36028797018963968L,15481123719086080L,36046389205008384L,0L,8796093022208L,12103423998558208L,144123984168878080L,0L,17592186044416L,12384898975268864L,17592186044416L,16L,144115188075855872L,16044073672507392L,144115188075855872L,8L,0L,19140298416324624L},{288230376151711744L,16L,0L,19421773393035296L,35184372088832L,32L,288230376151711744L,16325548649218048L,288247968337756160L,0L,35184372088832L,12666373951979520L,72092778410016768L,0L,17592186044416L,12384898975268864L,17592186044416L,16L,72057594037927936L,15762598695796736L,72057594037927936L,32L,0L,19140298416324624L},{576460752303423488L,32L,0L,19703248369745984L,70368744177664L,64L,576460752303423488L,16607023625928704L,576495936675512320L,0L,70368744177664L,12947848928690176L,144185556820033536L,0L,35184372088832L,12666373951979520L,35184372088832L,32L,144115188075855872L,16044073672507392L,144115188075855872L,64L,0L,19421773393035296L},{70368744177664L,0L,51556384768L,9570149208162304L,70368744177664L,0L,1729382256910270464L,16607023625928832L,70368744177664L,0L,1153343751431651328L,13229323905400832L,288230376151711744L,0L,0L,19703248369877184L,288230376151711744L,0L,1729382256910270464L,16607023625928832L,1152921504606846976L,64L,0L,19984723346456704L,140737488355328L,128L,1152921504606846976L,16888498602639360L,1152991873351024640L,0L,140737488355328L,13229323905400832L,288371113640067072L,0L,70368744177664L,12947848928690176L,70368744177664L,64L,288230376151711744L,16325548649218048L,288230376151711744L,128L,0L,19703248369745984L},{576460752303423488L,0L,0L,19984723346719104L,576460752303423488L,0L,3458764513820540928L,16888498602639616L,140737488355328L,0L,103112769536L,9851624184872960L,140737488355328L,0L,2306687502863302656L,13510798882111488L,140737488355328L,0L,3458764513820540928L,16888498602639616L,140737488355328L,128L,576460752303423488L,16607023625928704L,576742227280134144L,0L,140737488355328L,13229323905400832L,2305983746702049280L,0L,281474976710656L,13510798882111488L,281474976710656L,256L,2305843009213693952L,17169973579350016L,2305843009213693952L,128L,0L,20266198323167488L,576460752303423488L,256L,0L,19984723346456704L},{1152921504606846976L,0L,0L,20266198323167488L,281474976710656L,0L,562949953421312L,13792273858822144L},{-9223372036854775808L,0L,0L,20547673299878400L,2251799813685248L,0L,1125899906842624L,14073748835532800L},{4503599627370496L,0L,4615063718147915776L,14355223812243456L,4503599627370496L,0L,-4611686018427387904L,17732923532771840L,0L,1L,-4611686018427387904L,17732923532771840L,0L,1L,0L,20829148277114368L,2251799813685248L,1L,4503599627370496L,14636698788954112L,4503599627370496L,1024L,0L,18014398509481985L,0L,513L,0L,20829148276589568L,4611686018427387904L,1024L,0L,20547673299878400L,2251799813685248L,512L,4611686018427387904L,17451448556060672L,4616189618054758400L,0L,2251799813685248L,14355223812243456L},{0L,2L,-9223372036854775808L,18014398509483009L,0L,2L,0L,21110623254350848L,9007199254740992L,0L,-9223372036854775808L,18014398509483009L,9007199254740992L,0L,-9216616637413720064L,14636698788954112L,4503599627370496L,2L,9007199254740992L,14918173765664768L,-9214364837600034816L,0L,4503599627370496L,14636698788954112L,4503599627370496L,1024L,-9223372036854775808L,17732923532771328L,-9223372036854775808L,2048L,0L,20829148276589568L,0L,1026L,0L,21110623253301248L,9007199254740992L,2048L,0L,18295873486192642L},{18014398509481984L,1L,9007199254740992L,14918173765664768L,9007199254740992L,4L,18014398509481984L,15199648742375424L,18014398509481984L,4096L,0L,18577348462903300L,0L,2052L,0L,21392098230013952L,0L,4097L,0L,21110623253301248L,9007199254740992L,2048L,0L,18014398509481985L},{36028797018963968L,2L,18014398509481984L,15199648742375424L,18014398509481984L,4096L,0L,18295873486192642L,0L,8194L,0L,21392098230013952L,0L,4104L,0L,21673573206728704L,36028797018963968L,8192L,0L,18858823439613960L,18014398509481984L,8L,36028797018963968L,15481123719086080L},{0L,8208L,0L,21955048183447552L,0L,16388L,0L,21673573206728704L,36028797018963968L,8192L,0L,18577348462903300L,72057594037927936L,4L,36028797018963968L,15481123719086080L,36028797018963968L,16L,72057594037927936L,15762598695796736L,72057594037927936L,16384L,0L,19140298416324624L},{72057594037927936L,32L,144115188075855872L,16044073672507392L,144115188075855872L,8L,72057594037927936L,15762598695796736L,72057594037927936L,16384L,0L,18858823439613960L,0L,32776L,0L,21955048183447552L,0L,16416L,0L,22236523160174592L,144115188075855872L,32768L,0L,19421773393035296L},{288230376151711744L,16L,144115188075855872L,16044073672507392L,144115188075855872L,64L,288230376151711744L,16325548649218048L,288230376151711744L,65536L,0L,19703248369745984L,0L,32832L,0L,22517998136918016L,0L,65552L,0L,22236523160174592L,144115188075855872L,32768L,0L,19140298416324624L},{0L,32L,0L,19703248369877184L,0L,32L,0L,22517998204157952L,288230376151711744L,0L,0L,19703248369877184L,288230376151711744L,0L,1729382256910270464L,16607023625928832L,0L,131104L,0L,22517998136918016L,0L,65664L,0L,22799473113694208L,576460752303423488L,131072L,0L,19984723346456704L,288230376151711744L,128L,576460752303423488L,16607023625928704L,576460752303423488L,32L,288230376151711744L,16325548649218048L,288230376151711744L,65536L,0L,19421773393035296L},{0L,64L,0L,19984723346719104L,0L,64L,0L,22799473248174080L,576460752303423488L,0L,0L,19984723346719104L,576460752303423488L,0L,3458764513820540928L,16888498602639616L,0L,262208L,0L,22799473113694208L,0L,131328L,0L,23080948090535936L,1152921504606846976L,262144L,0L,20266198323167488L,576460752303423488L,256L,1152921504606846976L,16888498602639360L,1152921504606846976L,64L,576460752303423488L,16607023625928704L,576460752303423488L,131072L,0L,19703248369745984L},{1152921504606846976L,0L,2305843009213693952L,17169973579350016L,0L,128L,0L,23080948090535936L},{-9223372036854775808L,0L,4611686018427387904L,17451448556060672L,0L,1024L,0L,23362423067508736L},{0L,1L,-4611686018427387904L,17732923532771840L,0L,1L,0L,20829148277114368L,0L,2048L,0L,23643898313703424L,0L,2048L,0L,20829148277114368L,0L,1049088L,0L,23362423067508736L,-9223372036854775808L,524288L,0L,20547673299878400L,0L,513L,-9223372036854775808L,17732923532771328L,-9223372036854775808L,2048L,0L,18014398509481985L,0L,1048577L,0L,21110623253301248L,0L,526336L,0L,23643898044743680L},{0L,2L,-9223372036854775808L,18014398509483009L,0L,2L,0L,21110623254350848L,0L,4096L,0L,23925374634164224L,0L,4096L,0L,24206851222536192L,0L,4096L,0L,21110623254350848L,0L,2098176L,0L,23643898044743680L,0L,1048577L,0L,20829148276589568L,0L,1026L,0L,18014398509481985L,0L,4097L,0L,18295873486192642L,0L,2097154L,0L,21392098230013952L,0L,1052672L,0L,23925373022502912L},{0L,2105344L,0L,24206848001310720L,0L,4194308L,0L,21673573206728704L,0L,8194L,0L,18577348462903300L,0L,2052L,0L,18295873486192642L,0L,2097154L,0L,21110623253301248L,0L,4196352L,0L,23925373022502912L},{0L,8392704L,0L,24206848001310720L,0L,4194308L,0L,21392098230013952L,0L,4104L,0L,18577348462903300L,0L,16388L,0L,18858823439613960L,0L,8388616L,0L,21955048183447552L,0L,4210688L,0L,24488322982215680L},{0L,8208L,0L,18858823439613960L,0L,8388616L,0L,21673573206728704L,0L,16785408L,0L,24488322982215680L,0L,8421376L,0L,24769797967314944L,0L,16777232L,0L,22236523160174592L,0L,32776L,0L,19140298416324624L},{0L,65552L,0L,19421773393035296L,0L,33554464L,0L,22517998136918016L,0L,16842752L,0L,25051272960802816L,0L,33570816L,0L,24769797967314944L,0L,16777232L,0L,21955048183447552L,0L,16416L,0L,19140298416324624L},{0L,32L,0L,19703248369877184L,0L,32L,0L,22517998204157952L,0L,32768L,0L,22517998204157952L,0L,32768L,0L,25051298797715456L,0L,32768L,0L,24769810852216832L,0L,131104L,0L,19703248369745984L,0L,67108928L,0L,22799473113694208L,0L,33685504L,0L,25332747971067904L,0L,67141632L,0L,25051272960802816L,0L,33554464L,0L,22236523160174592L,0L,32832L,0L,19421773393035296L},{0L,64L,0L,19984723346719104L,0L,64L,0L,22799473248174080L,0L,65536L,0L,22799473248174080L,0L,65536L,0L,25332782465024000L,0L,262208L,0L,19984723346456704L,0L,134217856L,0L,23080948090535936L,0L,67371008L,0L,25614223014887424L,0L,134283264L,0L,25332747971067904L,0L,67108928L,0L,22517998136918016L,0L,65664L,0L,19703248369745984L},{0L,131072L,0L,25614223014887424L,0L,128L,0L,20266198323167488L},{0L,1024L,0L,20547673299878400L,0L,1048576L,0L,25895698125815808L},{0L,2097152L,0L,23643898313703424L,0L,2097152L,0L,26177379797827584L,0L,2097152L,0L,26459061201403904L,0L,2048L,0L,23643898313703424L,0L,2048L,0L,20829148277114368L,0L,270532608L,0L,26177173370961920L,0L,537395200L,0L,25895698125815808L,0L,268436480L,0L,23362423067508736L,0L,526336L,0L,20829148276589568L,0L,2098176L,0L,21110623253301248L,0L,536872960L,0L,23925373022502912L},{0L,4096L,0L,23925374634164224L,0L,4096L,0L,24206851222536192L,0L,4096L,0L,21110623254350848L,0L,1074790400L,0L,26177173370961920L,0L,541065216L,0L,26458648884543488L,0L,1073745920L,0L,24206848001310720L,0L,4196352L,0L,21392098230013952L,0L,1052672L,0L,21110623253301248L,0L,536872960L,0L,23643898044743680L},{0L,4096L,0L,23925374634164224L,0L,4096L,0L,24206851222536192L,0L,4096L,0L,21110623254350848L,0L,8192L,0L,24488329424666624L,0L,8192L,0L,24206851222536192L,0L,2105344L,0L,21392098230013952L,0L,8392704L,0L,21673573206728704L,0L,2147491840L,0L,24488322982215680L,0L,1082130432L,0L,26740124934995968L,0L,2149580800L,0L,26458648884543488L,0L,1073745920L,0L,23925373022502912L},{0L,8192L,0L,24488329424666624L,0L,8192L,0L,24206851222536192L,0L,16384L,0L,24488329424666624L,0L,16384L,0L,24769810852216832L,0L,4210688L,0L,21673573206728704L,0L,16785408L,0L,21955048183447552L,0L,4294983680L,0L,24769797967314944L,0L,2164260864L,0L,27021602059190272L,0L,4299161600L,0L,26740124934995968L,0L,2147491840L,0L,24206848001310720L},{0L,32768L,0L,22517998204157952L,0L,32768L,0L,25051298797715456L,0L,32768L,0L,24769810852216832L,0L,16384L,0L,24488329424666624L,0L,16384L,0L,24769810852216832L,0L,8598323200L,0L,27021602059190272L,0L,4328521728L,0L,27303081330868224L,0L,8589967360L,0L,25051272960802816L,0L,33570816L,0L,22236523160174592L,0L,8421376L,0L,21955048183447552L,0L,4294983680L,0L,24488322982215680L},{0L,32768L,0L,22517998204157952L,0L,32768L,0L,25051298797715456L,0L,32768L,0L,24769810852216832L,0L,17196646400L,0L,27303081330868224L,0L,8589967360L,0L,24769797967314944L,0L,16842752L,0L,22236523160174592L,0L,67141632L,0L,22517998136918016L,0L,17179934720L,0L,25332747971067904L,0L,8657043456L,0L,27584564897513472L},{0L,65536L,0L,22799473248174080L,0L,65536L,0L,25332782465024000L,0L,33554432L,0L,27591196327018496L,0L,33554432L,0L,27306379865751552L,0L,33554432L,0L,25332782465024000L,0L,17314086912L,0L,27866057054093312L,0L,34359869440L,0L,25614223014887424L,0L,134283264L,0L,22799473113694208L,0L,33685504L,0L,22517998136918016L,0L,17179934720L,0L,25051272960802816L,0L,34393292800L,0L,27584564897513472L},{0L,131072L,0L,23080948090535936L,0L,67108864L,0L,27866057054093312L},{0L,1048576L,0L,23362423067508736L,0L,536870912L,0L,28147566390542336L},{0L,2097152L,0L,23643898313703424L,0L,2097152L,0L,26177379797827584L,0L,2097152L,0L,26459061201403904L,0L,270532608L,0L,23643898044743680L,0L,68720525312L,0L,25895698125815808L,0L,137707388928L,0L,28147566390542336L,0L,69793218560L,0L,28429110086729728L,0L,137441050624L,0L,26458648884543488L,0L,1074790400L,0L,23925373022502912L},{0L,2097152L,0L,23643898313703424L,0L,2097152L,0L,26177379797827584L,0L,2097152L,0L,26459061201403904L,0L,4194304L,0L,26740949568716800L,0L,4194304L,0L,26459061201403904L,0L,2149580800L,0L,24206848001310720L,0L,274882101248L,0L,26740124934995968L,0L,139586437120L,0L,28710722502393856L,0L,275414777856L,0L,28429110086729728L,0L,137441050624L,0L,26177173370961920L,0L,541065216L,0L,23925373022502912L},{0L,8388608L,0L,27023251326631936L,0L,8388608L,0L,26740949568716800L,0L,4194304L,0L,26740949568716800L,0L,4194304L,0L,26459061201403904L,0L,279172874240L,0L,28992472357011456L,0L,549764202496L,0L,27021602059190272L,0L,4299161600L,0L,24488322982215680L,0L,1082130432L,0L,24206848001310720L,0L,274882101248L,0L,26458648884543488L,0L,550829555712L,0L,28710722502393856L},{0L,8388608L,0L,27023251326631936L,0L,8388608L,0L,26740949568716800L,0L,16777216L,0L,27023251326631936L,0L,16777216L,0L,27306379865751552L,0L,549764202496L,0L,26740124934995968L,0L,2164260864L,0L,24488322982215680L,0L,8598323200L,0L,24769797967314944L,0L,1099528404992L,0L,27303081330868224L,0L,558345748480L,0L,29274497089536000L,0L,1101659111424L,0L,28992472357011456L},{0L,33554432L,0L,27591196327018496L,0L,33554432L,0L,27306379865751552L,0L,33554432L,0L,25332782465024000L,0L,16777216L,0L,27023251326631936L,0L,16777216L,0L,27306379865751552L,0L,17196646400L,0L,25051272960802816L,0L,4328521728L,0L,24769797967314944L,0L,1099528404992L,0L,27021602059190272L,0L,2203318222848L,0L,29274497089536000L,0L,1116691496960L,0L,29557071577874432L,0L,2199056809984L,0L,27584564897513472L},{0L,33554432L,0L,27591196327018496L,0L,33554432L,0L,27306379865751552L,0L,33554432L,0L,25332782465024000L,0L,2233382993920L,0L,29840745577840640L,0L,4406636445696L,0L,29557071577874432L,0L,2199056809984L,0L,27303081330868224L,0L,8657043456L,0L,25051272960802816L,0L,34393292800L,0L,25332747971067904L,0L,4398113619968L,0L,27866057054093312L},{0L,67108864L,0L,25614223014887424L,0L,17179869184L,0L,29840745577840640L},{0L,536870912L,0L,25895698125815808L,0L,536870912L,0L,28429110086729728L},{0L,536870912L,0L,28147566390542336L,0L,1073741824L,0L,28710722502393856L},{0L,1073741824L,0L,28429110086729728L,0L,2147483648L,0L,28992472357011456L},{0L,4294967296L,0L,29274497089536000L,0L,2147483648L,0L,28710722502393856L},{0L,8589934592L,0L,29557071577874432L,0L,4294967296L,0L,28992472357011456L},{0L,8589934592L,0L,29274497089536000L,0L,17179869184L,0L,29840745577840640L},{0L,17179869184L,0L,29557071577874432L,0L,17179869184L,0L,27866057054093312L}};

	// The opening book, encoded recursively as follows:
	 // openingBook[0] is the move to play in the current state
	 // openingBook[i] is the opening book after playing move i
	  // If openingBook.length == 1 there are no child opening books
	  // If openingBook[i] == null, there is no recursive opening book
	public static final Object[] openingBook = getOpeningBook();
	
	private static Object[] getOpeningBook() {
		// Hack to avoid this method to exceed Java's 65536 byte limit
		Object[] o44 = o(44);
		
		// This opening book is computed by evaluating the strength of a game state by playing a number of games in self-play
		// Each position has been sampled using 256 games with a time limit of 5 seconds per player.
		// The best move in a given state is picked using the minimax algorithm, where the first player tried to maximize his win chance, and the opponent tries to minimize the win chance of the first player
		return o(11,o44,o(31),o(31),o(31),o(42),o(20),o(67,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(11),null,null,null,null,null,null,null,null,null,o(15),null,null,null,null,null,null,null,null,null,null,o(28),null,o(34),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(53),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null),o(22),o44,o(30),o(29,null,null,null,null,null,o(31),o(13),o(56),null,null,null,o(41),o(29),o(42),o(32),null,null,o(42),o(7),o(7),o(29),o(13),o(7),o(42),null,null,o(28),o(20),o(7,null,null,o(39),null,null,o(39),o(22),o(33),null,null,null,o(39),o(56),o(42),o(67),null,null,o(12),o(21),o(42),o(12),o(21),o(55),o(12),null,null,o(12),o(12),null,o(20),o(21),o(55),o(14),o(7),o(39),null,null,o(55),o(52),o(28),o(40),o(53),o(53),o(12),o(42),o(56),o(55),o(12),null,null,o(66),o(39),o(39),o(39),o(39),o(53),o(45),
			o(21),o(55),o(69),null,null,o(39),o(39),o(39),o(39),o44,o(40),o(21),o(33),o(79),null,null,o(38),o(39),o(39),o(53),o(39),o(39),o(54),o(12),null,null,o(53),o(39),o(39),o(39),o(39),o(39),o(21),null,null,o(39),o(39),o(12),o(39),o(39),o(39),null,null,null,null,null,null,null,null),o(29),o(7),o(41),o(42),o(32),o44,null,null,o(55),o(42),o(56),o(20),o(28),o(32),o(66),o(54),o(42),o(54),o44,null,null,o(55),o(56),o(40),o(28),o(76),o(53),o(42),o(55),o(54),o44,null,null,o(38),o(38),o(21),o(28),o(31),o(66),o(55),o(55),o(55),null,null,o(54),o(42),o44,o(76),o(28),o(31),o(78),o44,null,
			null,o44,o(42),o(76),o(55),o(42),o(68),o(56),null,null,o44,o(56),o(31),o(86),o(42),o(78),null,null,null,null,null,null,null,null),o(55,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(13),null,null,null,null,null,null,o(33),null,o(29),o(41),null,null,null,null,null,null,null,o(56),null,o(32),null,o(42),null,null,null,null,null,null,null,null,null,o(40),o(42),o(46),o(31),null,null,null,null,null,null,null,null,null,o(46),null,null,null,null,null,null,null,null,o(32),null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(67,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(40),o(56),o(55),o(46),null,null,null,null,null,null,null,null,null,o(31),null,null,null,null,null,
			null,null,null,o(31),null,null,o(31),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(56,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(13),null,null,null,null,null,null,null,null,null,o(45),o(33),null,o(29),null,null,null,null,null,null,null,null,o44,null,o(30),null,o(55),null,null,null,null,null,null,null,o(31),o(40),o44,o(46),null,null,null,null,null,null,null,null,null,o(40),
			null,null,null,null,null,null,null,null,null,null,null,o(30),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(33,null,null,null,null,null,o(55),o(13),o(31),null,null,o(30),o44,o(33),o(45),null,null,null,o44,o(7),o(13),o(33),o(7),o(7),o44,null,null,o(42),o(30),o44,o(45),o(7),o(33),o(7,null,null,o(47),null,null,o(29),o(20),o(47),null,null,o(67),o44,o(55),o(47),null,null,null,o(14),o(56),o(21),o(14),o44,o(21),o(14),null,null,o(47),o(7),o(12),
			o(56),o(21),o(22),null,o(14),o(14),null,null,o(14),o(56),o(55),o44,o(14),o(58),o(58),o(46),o(34),o(59),o(56),null,null,o(65),o(56),o(21),o(41),o(58),o(47),o(47),o(47),o(47),o(68),null,null,o(76),o(29),o(21),o(46),o(42),o(47),o(47),o(47),o(47),null,null,o(14),o(57),o(47),o(47),o(58),o(47),o(47),o(48),null,null,o(21),o(47),o(47),o(47),o(47),o(47),o(58),null,null,o(47),o(47),o(47),o(14),o(47),o(47),null,null,null,null,null,null,null,null),o(22),o(34),null,null,o(42),o(57),o44,o(57),o(68),o(30),o(34),o(22),o(55),o44,o(59),null,null,o(42),o(57),o(56),o44,o(58),o(79),o(34),o(46),
			o(55),o(56),null,null,o(56),o(56),o(56),o(68),o(31),o(34),o(21),o(48),o(48),null,null,o(42),o(77),o(31),o(34),o(79),o(42),o44,o(57),null,null,o(55),o(66),o44,o(56),o(79),o44,o(42),null,null,o(77),o44,o(88),o(31),o(55),o(42),null,null,null,null,null,null,null,null),o(32),o(31),o(20,null,null,o(14),null,null,o(12),o(31),o44,null,null,o(31),o(29),o(56),o(56),o(3),null,null,null,o(39),o(39,null,null,o44,null,null,o(28),o(14),o(45),null,null,o(28),o(28),o(12),o(7),o(7),null,null,null,o(12),null,o(13),o(7),o(7),o(3),null,null,o(7),o(7),o(31),o(29),o(22),
			o(7),o(7),o(7),o(22),null,null,o(7),o(53),o(56),o(28),o(41),o(22),o(7),o(7),o(7),o(7),o(7),null,null,o(65),o(31),o(41),o44,o(28),o(22),o(55),o(22),o(7),o(7),null,null,o(57),o44,o44,o(31),o(66),o(13),o(7),o(7),o(28),null,null,o(28),o(39),o(56),o(41),o(41),o(7),o(7),o(7),null,null,o(7),o44,o44,o(65),o(32),o(7),o(7),null,null,o(28),o(78),o(79),o(28),o(41),o(7),null,null,null,null,null,null,null,null),o(12),o(13),o(3),o(32),null,null,o(42),o(21),o(39),o(20),o(12),o(12),o(41),o(31),o(55),null,null,null,o(40),o(21),o(20),o(39),o(54),o(46),o(12),o(55),o(31),
			o(55),null,null,o(56),o(31),o(40),o(21),o(45),o(22),o(42),o(46),o(46),o(56),null,null,o(54),o(31),o(31),o(32),o(31),o(45),o(12),o44,o(42),null,null,o(31),o(54),o(31),o44,o44,o(42),o(31),o(59),null,null,o(55),o(32),o(32),o44,o(69),o(68),o(31),null,null,o(32),o(55),o44,o(55),o(56),o(69),null,null,null,null,null,null,null,null),o(22,null,null,null,null,null,null,null,null,null,null,null,null,o(21),o(22),null,null,null,null,null,null,o(29),o(40),o(42),null,null,null,null,null,null,null,o(40),null,o(56),null,null,null,null,null,null,o(41),o(20),o(13),
			null,o(54),o(13),o(42),null,null,null,null,null,o(53),o(13),null,o(32),o(13),null,null,null,null,null,null,null,o(31),o(56),o(40),null,null,null,null,null,null,null,null,null,o(31),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(55,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o44,null,null,null,null,null,null,null,null,null,null,o(31),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(56,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,o44,null,null,null,o(42),null,null,null,null,null,null,null,o(55),o44,o(42),o44,o(42),o(56),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(56,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(42),null,null,null,null,null,null,null,null,null,null,null,o(31),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(20,null,null,null,null,null,null,null,null,null,null,null,o(20),o(21),null,null,null,null,null,o44,o(46),o(33),null,
			null,null,null,null,null,null,o(55),null,o(46),null,null,null,null,null,null,null,null,o(55),o(13),o(57),null,o(46),o(22),o(45),null,null,null,null,null,null,null,null,o(13),o(30),null,o(13),o(58),null,null,null,null,null,null,null,null,o(46),o(55),o(31),null,null,null,null,null,null,null,null,o(31),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(22,null,null,o(12),null,null,o(42),o(31),o(14),null,null,o(3),o(55),o(55),o(33),o(31),null,null,
			o(30),o(3),o(13),o(14),o(47,null,null,o(42),null,null,o(41),o(12),o(34),null,null,o(7),o(7),o(14),o(34),o(34),null,null,o(3),o(7),o(7),o(13),null,o(14),null,null,null,o(20),o(7),o(7),o(7),o(20),o(33),o(31),o(7),o(7),null,null,o(7),o(7),o(7),o(7),o(7),o(20),o(45),o(34),o(55),o(58),o(7),null,null,o(7),o(7),o(20),o(56),o(20),o(34),o(42),o(45),o(31),o(69),null,null,o(34),o(7),o(7),o(13),o(68),o(31),o(42),o(42),o(54),null,null,o(7),o(7),o(7),o(45),o(45),o(55),o(47),o(34),null,null,o(7),o(7),o(30),o(69),o(42),o(42),o(7),null,null,o(7),o(41),o(34),o(76),o(77),
			o(34),null,null,null,null,null,null,null,null),o(47),null,null,null,o(56),o(31),o(45),o(14),o(14),o(22),o(47),o(21),o44,null,null,o(56),o(31),o(56),o(14),o(40),o(57),o(47),o(22),o(21),o(46),null,null,null,o(55),o(40),o(40),o44,o(20),o(41),o(21),o(46),o(31),o(55),null,null,o44,o(42),o(14),o(41),o(31),o(30),o(31),o(31),o(57),null,null,o(52),o(31),o44,o(42),o(42),o(31),o(57),o(31),null,null,o(31),o(66),o(65),o(42),o(30),o(30),o(56),null,null,o(65),o(55),o(56),o(42),o(56),o(30),null,null,null,null,null,null,null,null),o(31),o(30),o(20),o(44,null,null,null,null,null,
			null,null,null,null,null,null,null,o(56),null,null,null,null,null,null,o(65),null,null,null,null,null,null,null,null,null,null,o(54),o(13),null,null,null,null,null,null,null,null,null,o(20),null,o(31),null,o(54),null,null,null,null,null,null,o(40),o(21),o(21),o(76),o(76),null,null,null,null,null,null,null,null,null,o(42),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(44,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(55),o(42),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null),o(56,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o44,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null),o(21,null,null,null,null,null,null,null,null,null,null,null,o(40),null,o(46),null,null,null,null,null,null,o(32),null,null,null,null,null,null,null,null,o(55),null,o(56),null,null,null,null,null,null,null,o(55),null,o(56),null,o(55),null,o(56),null,null,null,null,null,null,null,o(41),null,null,o(45),null,null,null,null,null,null,null,o(56),o(56),null,o(55),o(55),null,null,null,null,null,null,o(41),null,null,o(45),null,null,null,null,null,null,null,o(69),null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(55,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(56),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(42,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o44,o(56),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(42,null,null,null,null,null,null,null,null,null,null,null,null,o(55),null,null,null,null,null,null,null,null,o(69),null,null,null,null,null,null,null,o(13),o(57),null,null,null,null,null,null,null,null,o(55),null,o(31),null,o(22),null,null,null,null,null,null,null,null,null,o(79),o(79),o(21),o(21),o(46),null,null,null,null,null,null,null,null,o44,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(22),o(32),o(57),o(42),o(57,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(12),null,null,null,null,null,null,null,null,null,o(18),o(18),null,null,null,null,null,null,null,null,null,null,null,null,o(75),null,o(22),null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(57,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(13),null,null,null,null,null,null,null,null,null,null,null,o(56),null,o(42),null,null,null,null,null,null,null,null,null,o44,o(42),null,null,null,null,null,null,
			null,null,null,o(76),null,null,null,null,null,null,null,null,null,null,null,o(42),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(44,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(55),o44,null,null,null,null,null,null,null,null,null,o(55),null,null,null,null,null,null,null,null,null,null,null,o(31),null,null,null,null,null,null,null,null,null,null,null,o(55),null,null,
			null,null,null,null,null,null,null,o(31),o(31),null,null,null,null,null,null,null,null,null,o(56),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(41,null,null,null,null,null,null,null,null,null,null,null,null,o44,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(13),null,o44,o(56),o(21),o(56),null,null,null,null,null,null,null,o(30),null,null,null,o(56),o(21),null,null,null,null,null,o(76),null,
			o(56),o44,null,null,null,null,null,null,null,null,null,null,null,o(66),o44,null,o(33),null,null,null,null,null,o(56),null,o44,o(66),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(32,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(56),null,o(55),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,o44,null,null,o(42),null,null,null,null,null,null,null,null,null,o(31),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(45,null,null,null,null,null,null,null,null,null,null,null,null,o(42),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(55),o(21),o(55),o(42),null,o(13),null,null,null,null,null,o(21),o(55),null,null,
			null,o(32),null,null,null,null,null,null,null,null,null,null,o(42),o(55),null,o(79),null,null,null,null,o(29),null,o(42),o(68),null,null,null,null,null,null,null,null,o(68),o(42),null,o(55),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(42,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(42),o(56),null,null,null,null,null,null,null,null,o(56),null,null,null,null,null,null,null,null,
			null,null,null,o(31),null,null,null,null,null,null,null,null,null,null,null,null,o(56),null,null,null,null,null,null,null,null,null,null,null,o(31),o(31),null,null,null,null,null,null,null,null,null,o(55),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(54,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(13),null,null,null,
			null,null,null,null,null,null,o44,null,o(55),null,null,null,null,null,null,null,null,null,null,null,o44,o(42),null,null,null,null,null,null,null,null,null,null,null,o(79),null,null,null,null,null,null,null,null,o44,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(54,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,o(14),null,null,null,null,null,null,null,null,null,null,null,null,o(24),o(24),null,null,null,null,null,null,null,null,o(20),null,o(80),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o44,o(54),o(42),o(53),o(56,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,o(40),o(66),o(55),o(42),null,null,null,null,null,null,null,null,null,o(65),null,o(13),null,null,null,null,null,null,null,null,null,null,o(30),o(55),o(13),null,null,null,null,null,null,null,o(20),null,o(76),null,null,null,null,null,null,null,null,o44,null,null,o(30),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(56,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(31),null,null,null,null,null,null,null,null,null,null,null,o(42),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(44,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(31),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(66,null,null,null,null,
			null,null,null,null,null,null,null,null,o(41),null,null,null,null,null,null,o44,o44,null,o(20),null,null,null,null,null,null,o(41),null,null,null,null,null,null,null,null,null,o(31),null,o44,null,null,o(31),o(68),null,null,null,null,null,null,null,o(31),null,o(31),o(68),o(31),null,null,null,null,null,null,null,o(54),o44,null,null,null,null,null,null,null,o(40),null,null,null,o44,null,null,null,null,null,null,o(79),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),
			o(68,null,null,null,null,null,null,null,null,null,null,null,null,o(45),null,null,null,null,null,o(22),null,o(42),o(42),null,null,null,null,null,null,null,null,null,o(45),null,null,null,null,null,null,null,o(66),o(31),null,null,o(42),null,o(31),null,null,null,null,null,null,o(31),o(66),o(31),null,o(31),null,null,null,null,null,null,null,null,null,o(42),o(57),null,null,null,null,null,null,null,o(42),null,null,null,o(46),null,null,null,null,null,null,null,o(76),null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null),o(42,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(31),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null),o(55,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(31),null,null,null,null,null,null,null,null,null,null,o44,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(55,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o44,o(56),o(68),o(46),null,null,null,null,null,null,null,null,o(13),null,o(69),null,null,null,null,null,null,null,null,null,o(13),o(56),o(32),null,null,null,null,null,null,null,null,null,null,o(79),null,o(22),null,null,null,null,null,null,o(32),null,null,o(42),null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(58),o44,o(55),o(65,null,null,o(31),null,null,o(31),o(67),o(31),null,null,o(55),o(30),o(55),o(67),o(56),null,null,o(30),o(39),o(55),o(67),o(56),o(56),o(31),null,null,o44,o(55),o(40),o(66),o(68),o(55),o(56),o(58),o44,null,null,null,o(40),o(65),o(65),o(39),o(30),o(77),o(68),o(42),o(45),o(58),null,null,o(42),o(66),o(39),o(65),o(75),o(79),o(42),o(75),o(55),o(55),null,null,null,o(39),o(21,null,null,o(52),null,null,o(85),o(56),o(33),null,null,o(52),o(39),o44,
			o(56),o(46),null,null,o(57),o(56),o(28),o(55),o(41),o(20),o(52),null,null,o(20),o(55),o(41),o(56),o(52),o(21),o(41),o(67),o(41),null,null,o(85),o(29),o44,o(52),o(41),o(77),o(77),o(76),o(85),o(85),o(85),null,null,o(85),o(85),o(55),o(53),o(77),o(85),o(31),o(85),o(85),o(85),null,null,null,o(41),null,o(76),o(85),o(85),o(77),o(85),o(85),null,null,o(52),o(52),o(75),o(85),o(85),o(85),o(85),o(52),null,null,o(52),o(86),o(85),o(85),o(85),o(85),o(85),null,null,o(56),o(68),o(85),o(93),o(77),o(85),null,null,null,null,null,null,null,null),o(53),o(75),o(75),o(79),o(56),o(80),null,null,o(55),
			o(53),o44,o(76),o(21),o(31),o(79),o(42),null,null,o(75),o(55),o44,o(93),o(55),o(55),o44,null,null,o(56),o(56),o(93),o(67),o(31),o(31),null,null,null,null,null,null,null,null),o(29,null,null,null,null,null,null,null,null,null,null,null,null,o(55),null,null,null,null,null,o(55),o44,o(40),null,null,null,null,null,null,o(29),o(76),null,o(67),null,null,null,null,null,null,null,null,o(41),o(65),o(76),null,o(31),null,null,null,null,null,null,null,null,null,null,o(40),o(30),null,null,null,null,null,null,null,null,null,o(53),null,o(76),null,
			null,null,null,null,null,null,o(66),o(40),o44,o(42),null,null,null,null,null,null,o(77),o(42),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(31,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(55),null,null,null,null,null,null,null,null,null,o(56),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(31,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(31),o(56),o(42),null,null,null,null,null,null,null,null,null,o(56),null,null,o(56),null,null,null,null,null,null,null,null,null,null,null,null,o(42),null,null,
			null,null,null,null,null,null,null,null,o(42),o44,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(31,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(42),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(31,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o44,o(55),o(31),null,null,null,null,null,null,null,null,o(55),null,null,o(55),null,null,null,null,
			null,null,null,null,o44,null,null,null,null,null,null,null,null,null,null,o(42),o44,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(31,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(56),null,null,null,null,null,null,null,null,null,o(55),null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(33,null,null,null,null,null,null,null,null,null,null,null,null,o(56),null,null,null,null,null,null,null,o(46),o(42),o(56),null,null,null,null,null,null,null,o(67),null,o(79),o(33),null,null,null,null,null,
			null,null,o(31),null,o(79),o(69),o(45),null,null,null,null,null,null,null,null,o(32),o(46),null,null,null,null,null,null,null,null,null,o(79),null,o(58),null,null,null,null,null,null,null,o44,o(42),o(46),o(68),null,null,null,null,null,null,null,o44,o(78),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(69,null,null,o(31),null,null,o(31),o(67),o(31),null,null,o(55),o(67),o(56),o(32),o(56),null,null,o(31),o(55),o(55),o(67),o(56),o(47),o(32),null,null,o(42),o(53),o(55),o(56),o(66),o(68),o(46),o(56),
			o(42),null,null,o(53),o(41),o44,o(66),o(78),o(32),o(47),o(69),o(68),o(46),null,null,null,o(56),o(56),o(80),o44,o(76),o(80),o(69),o(47),o(68),o44,null,null,o(75),o(55),o(76),o(80),o(80),o(58),o(21,null,null,o(59),null,null,o(29),o(55),o(89),null,null,o(40),o(55),o(42),o(47),o(59),null,null,o(59),o(22),o(45),o(56),o(34),o(55),o(54),null,null,o(45),o(67),o(45),o(21),o(59),o(55),o(45),o(56),o(22),null,null,o(89),o(89),o(89),o(79),o(78),o(78),o(45),o(59),o(42),o(33),o(89),null,null,o(89),o(89),o(89),o(31),o(89),o(78),o(58),o(56),o(89),o(89),null,null,o(89),o(89),o(78),o(89),o(89),
			o(79),null,o(45),null,null,null,o(59),o(89),o(87),o(89),o(89),o(80),o(59),o(59),null,null,o(89),o(89),o(89),o(89),o(89),o(88),o(59),null,null,o(89),o(78),o(98),o(89),o(66),o(55),null,null,null,null,null,null,null,null),o(47),null,null,null,o44,o(76),o(31),o(21),o(79),o(42),o(58),o(56),null,null,o(42),o(56),o(56),o(98),o(42),o(56),o(80),null,null,o(31),o(31),o(67),o(98),o(55),o(55),null,null,null,null,null,null,null,null),o(56),o(54),o(53,null,null,o(56),null,null,o(56),o(30),o44,null,null,o(30),o(42),o(56),o(13),o(55),null,null,o(38),o(38),o(68),o(52),o(13),o(31),
			o(14),null,null,o(31),o44,o(40),o(52),o(13),o(55),o(52),o(42),o(42),null,null,o(28),o(42),o44,o(52),o(52),o(67),o(29),o(21),o(55),o(45),o(33),null,null,o(52),o(65),o(68,null,null,o(39),null,null,o(29),o(39),o(39),null,null,o(38),o(39),o(19),o(39),o(75),null,null,o(39),o(39),o(39),o(39),o(29),o(39),o(39),null,null,o(21),o(39),o(39),o(39),o(39),o(56),o(39),o(39),o(39),null,null,o(31),o(28),o(52),o(40),o(29),o(29),o(29),o(40),o(39),o(39),o(39),null,null,o(75),o(75),null,o(65),o(66),o(75),o(68),o(66),o(30),o(21),null,null,o(75),o(52),o(42),o(75),o(31),o(42),o(66),o(78),o(75),null,
			null,null,o(39),o44,o(66),o(31),o44,o(31),o(46),null,null,o(39),o(77),o(42),o(31),o(85),o(31),o(58),null,null,o(39),o(78),o(32),o(75),o(39),o(75),null,null,null,null,null,null,null,null),o(53),o(85),o(21),o(42),o(31),o(33),o44,null,null,o(42),o(85),o(85),o(53),o(41),o(30),o(31),o(31),o(56),null,null,null,o(41),o(41),o(76),o(42),o(42),o(30),o(31),null,null,o(55),o(76),o(42),o(42),o(67),o(30),o(56),null,null,null,o44,o(67),o(42),o(56),o(30),null,null,null,null,null,null,null,null),o(31,null,null,null,null,null,null,null,null,null,null,null,null,o44,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(40),o(42),o(79),null,null,null,null,null,null,null,o44,null,o(67),null,o(79),null,null,null,null,null,null,null,null,o(78),null,o(53),o(42),o(55),null,null,null,null,null,null,null,null,null,o(41),null,null,null,null,null,null,null,null,null,o(76),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(32,null,null,null,null,null,null,null,null,null,
			null,null,null,o(55),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(40),o44,o(55),null,null,null,null,null,null,null,null,null,null,null,o(31),null,o(55),null,null,null,null,null,null,null,null,null,null,o(79),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(44,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(42),o(55),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),
			o(42,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(56),o44,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null),o(30,null,null,null,null,null,null,null,null,null,null,null,null,o(56),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(56),o(42),o(46),null,null,null,null,null,null,null,o(56),null,o(31),null,null,null,null,null,null,null,null,null,null,null,o(76),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null),o(31,null,null,null,null,null,null,null,null,null,null,null,null,o(42),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(76),o44,o(46),null,null,null,null,null,null,null,null,null,o(76),null,o(67),null,o(42),null,null,null,null,null,null,null,o(56),o44,o(58),null,o(77),null,null,null,null,null,null,null,null,o(45),null,null,null,null,null,null,null,null,null,null,o(79),null,null,null,null,null,null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(58,null,null,o(55),null,null,o(42),o(32),o(55),null,null,o(56),o(13),o(55),o44,o(32),null,null,o(12),o(31),o(13),o(59),o(68),o(48),o(48),null,null,o44,o44,o(59),o(56),o(13),o(59),o(46),o(42),o(31),null,null,o(29),o(41),o(56),o(21),o(33),o(67),o(59),o(59),o(42),o44,o(31),null,null,o(42),o(29),o(31),o44,o(21),o(89),o(58),o(66,null,null,o(47),null,null,o(47),o(47),o(33),null,null,o(80),o(47),o(23),o(47),o(48),null,null,o(47),o(47),o(33),o(47),o(47),o(47),o(47),null,null,o(47),o(47),
			o(47),o(55),o(47),o(47),o(47),o(47),o(21),null,null,o(47),o(47),o(47),o(46),o(33),o(33),o(33),o(46),o(59),o(34),o(31),null,null,o(21),o(32),o(68),o(66),o(80),o(68),o(69),null,o(80),o(80),null,null,o(80),o(77),o(68),o44,o(31),o(80),o44,o(59),o(80),null,null,o(40),o(31),o(42),o(31),o(68),o(42),o(47),null,null,null,o(53),o(31),o(89),o(31),o44,o(78),o(47),null,null,o(80),o(47),o(80),o(30),o(77),o(47),null,null,null,null,null,null,null,null),o(69),o(59),null,null,o(55),o(31),o(31),o(32),o(45),o(58),o(89),o(89),o44,null,null,o(31),o(32),o44,o44,o(79),o(45),o(45),null,null,
			null,o(55),o(32),o(67),o44,o44,o(79),o(56),null,null,o(32),o(55),o44,o(67),o(42),null,null,null,null,null,null,null,null,null),o(57),o(42),o(53),o(32,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(29),null,null,null,null,null,null,null,null,null,o(52),null,null,null,null,null,null,null,null,null,null,null,null,o(74),o(88),null,null,null,null,null,null,null,null,null,o(74),null,null,null,null,null,null,null,null,
			null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(44,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(55),o(40),o(40),null,null,null,null,null,null,null,null,null,o(56),null,o(56),null,o(31),null,null,null,null,null,null,null,o(68),o(78),o(54),o(79),null,null,null,null,null,null,null,o(76),null,null,null,null,
			null,null,null,null,null,null,null,null,o(53),o(31),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(69,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(42),null,null,null,null,null,null,null,null,o(56),o(76),o(57),null,o(54),o(79),o(55),null,null,null,null,null,null,o(31),null,o(79),o(76),null,o(31),null,null,null,null,null,o(56),
			o(79),o(78),null,o(77),o(76),o(55),null,null,null,null,o(65),o(66),null,null,o(68),o(69),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(42,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(46),o(46),o(56),null,null,null,null,null,null,null,o(31),null,o(55),null,o(55),null,null,null,null,null,null,null,null,null,o(76),o(57),o(77),o(66),null,null,
			null,null,null,null,null,null,null,null,null,o(79),null,null,null,null,null,null,o(31),o(58),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(30,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,o(33),null,null,null,null,null,null,null,null,null,null,null,null,null,o(59),null,null,null,null,null,null,null,null,null,null,
			o(86),o(81),null,null,null,null,null,null,null,null,null,null,null,o(81),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),o(58),o44,o(31),o(55),o(77),o(78,null,null,o(22),null,null,o(31),o(21),o(56),null,null,o(42),o(22),o(55),o(56),o(34),null,null,o44,o44,o44,o(45),o(88),o44,o(55),null,null,o(42),o(57),o44,o(56),o(69),o(55),o(46),o(46),o(31),null,null,o(42),o(57),o(56),o(57),o(45),o(54),o(46),
			o(88),o(42),o(57),o(42),null,null,o(42),o(54),o(56),o(68),o(85),o(88),o(88),o(41),o(56),o(42),null,null,o(56),o(56),o(76),o(78),o(78),o(77),o(79),o(98),o(57),null,null,o(54),o(56),o(68),o(85),o(41,null,null,o(89),null,null,o(45),o(89),o(89),null,null,o(86),o(57),o(89),o(89),o(89),null,null,o(13),o(53),o(66),o(79),o(89),o(89),o(86),null,null,o(20),o44,o(66),o(41),o(69),o(42),o(69),o(89),o(89),null,null,o(86),o44,o(31),o(56),o(86),o(69),o(89),o(89),o(70),o(89),o(89),null,null,o(89),o(85),o44,o44,o(66),o(69),o(89),o(89),o(89),o(69),null,null,o(86),o44,o(66),o(86),o(77),o(79),
			o(89),o(89),o(98),null,null,o(32),o(56),o(31),o(56),null,o(88),o(89),o(89),null,null,o(53),o(65),o(89),o(66),o(86),o(80),o(45),null,null,o(89),o(89),null,o(86),o(86),o44,null,null,null,null,null,null,null,null),o(31),o(31),o(98),null,null,o(31),o(76),o(68),o(85),o(77),o(56),o44,null,null,null,o(55),null,o(56),o(88),o44,null,null,null,null,null,null,null,null),o(77,null,null,o(20),null,null,o(55),o(21),o(31),null,null,o(28),o(55),o(56),o(20),o44,null,null,o(56),o(42),o(86),o(41),o(42),o(42),o(42),null,null,o(31),o(40),o(40),o(56),o(65),o(55),o(42),o(54),o44,
			null,null,o44,o(55),o44,o(86),o(40),o(57),o(41),o(54),o(55),o(54),o44,null,null,o44,o(55),o(45),o(86),o(86),o(89),o(66),o(55),o(57),o44,null,null,o(54),o(93),o(76),o(78),o(77),o(77),o(79),o(55),o(55),null,null,o(93),o(31),o(31),o(45,null,null,o(85),null,null,o(85),o(85),o(41),null,null,o(85),o(85),o(85),o(54),o(88),null,null,o(88),o(85),o(85),o(76),o(68),o(58),o(13),null,null,o(85),o(85),o(65),o44,o(65),o(45),o(68),o(42),o(22),null,null,o(85),o(85),o(64),o(85),o(85),o(65),o(88),o(55),o(31),o(42),o(88),null,null,o(65),o(85),o(85),o(85),o(65),o(68),o(42),o(42),o(89),o(85),
			null,null,o(93),o(85),o(85),o(76),o(78),o(88),o(68),o(42),o(88),null,null,o(85),o(85),o(86),null,o(55),o(31),o(55),o(30),null,null,o(41),o(75),o(88),o(68),o(85),o(69),o(58),null,null,o(42),o(88),o(88),null,o(85),o(85),null,null,null,null,null,null,null,null),o(89),o(66),o(55),o(57),null,null,o(42),o(55),o(78),o(89),o(66),o(79),o(31),null,null,o(42),o(86),o(55),null,o(56),null,null,null,null,null,null,null,null,null),o(77),o(56),o(31),o(32),o44,o(56),o(67),o(55),o(42),o(30));
	
		// Human readable version of the opening book with symmetry reduction, where each line has the following structure:
		//  <sequence of moves that lead to the current state> <move to play> <win rate for the first player in self play>
		/*
		 15 0.390625				// Our opening move
		 1 44 0.2734375				// After the sequence '1', play '44', win rate is 0.2734375 for the player that played '1'
		 32 55 0.61328125			
		 32 55 56 0.81640625		// After the sequence '32 55', play '56', win rate is 0.81640625 for the player that played '32'
		 3 31 0.3359375
		 4 31 0.30078125
		 7 67 0.46484375
		 7 21 11 0.64453125
		 7 31 15 0.72265625
		 7 42 28 0.6328125
		 7 44 34 0.65625
		 7 67 53 0.60546875
		 8 22 0.3359375
		 9 44 0.24609375
		 43 32 0.49609375
		 43 32 67 0.66796875
		 43 67 31 0.73046875
		 13 67 0.48828125
		 13 55 56 0.7578125
		 13 57 46 0.796875
		 13 67 42 0.69140625
		 13 79 31 0.8125
		 14 56 0.53125
		 14 20 13 0.75
		 14 31 33 0.875
		 14 30 45 0.75
		 14 33 29 0.7265625
		 14 42 44 0.6875
		 14 46 55 0.82421875
		 14 44 30 0.6875
		 14 55 40 0.71484375
		 14 54 31 0.75
		 14 57 46 0.6796875
		 14 56 44 0.6484375
		 14 67 40 0.671875
		 14 79 30 0.75
		 15 33 0.390625
		 15 6 55 0.81640625
		 15 7 13 0.734375
		 15 8 31 0.8125
		 15 11 30 0.7578125
		 15 12 44 0.76171875
		 15 13 33 0.65625
		 15 14 45 0.70703125
		 15 19 7 0.75390625
		 15 18 44 0.75390625
		 15 21 33 0.6875
		 15 20 13 0.7265625
		 15 23 7 0.703125
		 15 22 7 0.6875
		 15 24 44 0.7734375
		 15 27 42 0.80078125
		 15 29 44 0.765625
		 15 28 30 0.76953125
		 15 31 7 0.71484375
		 15 30 45 0.66015625
		 15 34 22 0.765625
		 15 35 34 0.85546875
		 15 32 33 0.65234375
		 15 33 7 0.390625
		 15 33 3 47 0.26171875
		 15 33 6 29 0.25
		 15 33 7 20 0.390625
		 15 33 8 47 0.15625
		 15 33 11 67 0.28125
		 15 33 12 44 0.33203125
		 15 33 13 55 0.26953125
		 15 33 14 47 0.11328125
		 15 33 19 56 0.33203125
		 15 33 18 14 0.2890625
		 15 33 21 14 0.20703125
		 15 33 20 21 0.36328125
		 15 33 23 21 0.1796875
		 15 33 22 44 0.3515625
		 15 33 24 14 0.15234375
		 15 33 27 47 0.2734375
		 15 33 29 12 0.31640625
		 15 33 28 7 0.203125
		 15 33 31 21 0.1875
		 15 33 30 56 0.30078125
		 15 33 34 14 0.359375
		 15 33 35 14 0.1484375
		 15 33 32 22 0.265625
		 15 33 38 14 0.26953125
		 15 33 39 56 0.28125
		 15 33 42 14 0.3828125
		 15 33 43 58 0.14453125
		 15 33 40 55 0.34765625
		 15 33 41 44 0.390625
		 15 33 46 34 0.359375
		 15 33 47 59 0.36328125
		 15 33 44 58 0.15625
		 15 33 45 46 0.125
		 15 33 51 65 0.25390625
		 15 33 48 56 0.35546875
		 15 33 55 58 0.24609375
		 15 33 54 41 0.3359375
		 15 33 53 21 0.33203125
		 15 33 52 56 0.26953125
		 15 33 59 47 0.31640625
		 15 33 58 47 0.19921875
		 15 33 57 47 0.25390625
		 15 33 56 47 0.28125
		 15 33 63 76 0.3203125
		 15 33 60 68 0.27734375
		 15 33 68 47 0.26171875
		 15 33 69 47 0.3203125
		 15 33 70 47 0.25390625
		 15 33 71 47 0.18359375
		 15 33 64 29 0.3515625
		 15 33 65 21 0.265625
		 15 33 66 46 0.24609375
		 15 33 67 42 0.296875
		 15 33 76 47 0.1953125
		 15 33 77 47 0.265625
		 15 33 78 58 0.28515625
		 15 33 79 47 0.34375
		 15 33 74 14 0.2265625
		 15 33 75 57 0.33203125
		 15 33 85 47 0.23046875
		 15 33 84 21 0.24609375
		 15 33 87 47 0.23828125
		 15 33 86 47 0.2578125
		 15 33 81 48 0.30078125
		 15 33 80 47 0.24609375
		 15 33 93 47 0.22265625
		 15 33 95 47 0.18359375
		 15 33 94 47 0.140625
		 15 33 89 47 0.28125
		 15 33 88 47 0.2890625
		 15 33 90 58 0.234375
		 15 33 98 47 0.1875
		 15 33 96 14 0.24609375
		 15 33 97 47 0.17578125
		 15 38 42 0.80859375
		 15 39 57 0.75390625
		 15 42 68 0.59765625
		 15 43 30 0.7421875
		 15 40 44 0.75
		 15 41 57 0.6484375
		 15 46 55 0.703125
		 15 47 44 0.703125
		 15 44 34 0.62890625
		 15 45 22 0.65625
		 15 51 42 0.80859375
		 15 48 59 0.7578125
		 15 55 58 0.5859375
		 15 54 44 0.65234375
		 15 53 56 0.73828125
		 15 52 57 0.74609375
		 15 59 55 0.69140625
		 15 58 46 0.66015625
		 15 57 34 0.640625
		 15 56 79 0.6015625
		 15 63 56 0.74609375
		 15 60 56 0.80859375
		 15 68 34 0.6484375
		 15 69 21 0.6640625
		 15 70 48 0.6796875
		 15 71 48 0.75
		 15 64 56 0.72265625
		 15 65 56 0.67578125
		 15 66 68 0.68359375
		 15 67 31 0.65234375
		 15 76 31 0.703125
		 15 77 34 0.66015625
		 15 78 79 0.68359375
		 15 79 42 0.67578125
		 15 74 42 0.7578125
		 15 75 77 0.7421875
		 15 85 66 0.73046875
		 15 84 55 0.8125
		 15 87 56 0.6640625
		 15 86 44 0.765625
		 15 81 57 0.75
		 15 80 44 0.6875
		 15 93 77 0.7890625
		 15 95 88 0.7578125
		 15 94 44 0.80859375
		 15 89 44 0.7265625
		 15 88 79 0.765625
		 15 90 42 0.80078125
		 15 98 42 0.78125
		 15 96 31 0.7421875
		 15 97 55 0.796875
		 16 44 0.30078125
		 21 56 0.6484375
		 21 45 42 0.8671875
		 21 55 42 0.84765625
		 21 53 55 0.890625
		 21 58 56 0.8828125
		 21 57 42 0.84375
		 21 56 44 0.80078125
		 23 58 0.61328125
		 23 19 44 0.796875
		 23 31 46 0.82421875
		 23 42 57 0.77734375
		 23 40 56 0.8125
		 23 46 45 0.8515625
		 23 44 46 0.828125
		 23 45 22 0.7734375
		 23 55 13 0.70703125
		 23 59 58 0.82421875
		 23 58 13 0.67578125
		 23 56 57 0.70703125
		 23 68 46 0.73046875
		 23 69 55 0.78515625
		 23 79 31 0.7890625
		 22 56 0.59765625
		 22 56 42 0.765625
		 22 68 31 0.78515625
		 31 30 0.765625
		 31 14 46 0.90625
		 31 21 32 0.82421875
		 31 30 55 0.8125
		 31 32 56 0.82421875
		 31 42 56 0.94140625
		 31 40 55 0.85546875
		 31 46 54 0.8515625
		 31 44 55 0.91015625
		 31 57 45 0.90234375
		 31 68 45 0.8515625
		 31 65 56 0.89453125
		 31 66 56 0.91015625
		 31 79 45 0.87890625
		 31 87 69 0.875
		 */
	}
	
	// Convenience method to compress the opening book encoding
	private static Object[] o(Object... objects) {
		return objects;
	}
	
	// Entry point
	private static Lynx3 main = new Lynx3();
	public static void main(String[] args) throws IOException {
		main.start();
	}
	
	// Main loop
	public void start() throws IOException {
		System.err.println("R bot");
		System.err.flush();
		
		IO io = new IO();
		
		TreeBotFinal bot = new TreeBotFinal();
		
		double remainingTime = TOTAL_TIME;
		
		while(true) {
			int move = io.getMove();
			
			double start = System.nanoTime();
			
			int response = bot.play(move, remainingTime);
			
			long end = System.nanoTime();
			double time = ((double) (end - start)) / 1000000000;
			remainingTime -= time;
			
			io.doMove(response);
			
			System.err.println(response);
			System.err.println("Used " + time + " seconds, " + remainingTime + " seconds remaining.");
		}
	}
	
	// Some convenience methods for dealing with I/O
	private class IO {
		private BufferedReader reader;
		
		public IO() {
			reader = new BufferedReader(new InputStreamReader(System.in));
		}
		
		public int getMove() throws IOException {
			String input = reader.readLine();
			if(input.equals("Start")) return 0;
			if(input.equals("Quit")) System.exit(0);
			return Integer.parseInt(input);
		}
		
		public void doMove(int position) {
			System.out.println(position);
			System.out.flush();
		}
	}
	
	// Our player
	public class TreeBotFinal {
		// The game tree for the current game position
		private Tree tree = null;	

		// The moves that have been played so far, used for querying the opening book
		private List<Integer> playedMoves = new ArrayList<Integer>();
		
		// Is this the first time we are playing?
		private boolean isFirst = true;
		
		public int play(int lastMove, double remainingTime) {
			if(lastMove > 0) {
				playedMoves.add(lastMove);
			}
			
			// Process opponent move
			if(lastMove > 0) {
				if(tree == null) {
					// If there is no game tree yet, construct one
					tree = new Tree(new GameState(), false);
				}
				// Update the root of the tree to the child tree corresponding to the opponents move
				tree = tree.treeAfterMove(lastMove);
			} else {
				// I start the game
				if(lastMove == 0) tree = new Tree(new GameState(), true);
				
				// Opponent chose to swap places
				if(lastMove == -1) {
					tree.state.swapPlayers();
					tree = new Tree(tree.state, true);
				}
			}
			
			// The move that we are going to play
			int bestMove;
			
			try {
				if(isFirst && lastMove != 0 && (edgeDistance[lastMove] > 1 || lastMove == 15 || lastMove == 24 || lastMove == 71 || lastMove == 81 || lastMove == 96 || lastMove == 95 || lastMove == 74 || lastMove == 63 || lastMove == 18 || lastMove == 11)) {
					bestMove = -1;	// We swap for all symmetries of move 15, and for all center moves (edge distance > 1)
				} else {
					// Query the opening book
					bestMove = getOpeningMove(playedMoves);
					
					if(bestMove == 0) {
						// If the opening book has no entry, compute the best move
						bestMove = tree.findBestMove(Math.max(remainingTime / TIME_DIVIDER, MINIMUM_TIME));
						if(bestMove == 0) bestMove = tree.state.remainingMoves[0];
					}
				}
			} catch(Exception e) {
				bestMove = tree.state.remainingMoves[0];	// Just in case something goes wrong, select a random move
				e.printStackTrace(System.err);
			}
			
			// Update the game tree based on the move that we have selected
			if(bestMove == -1) {
				tree.state.swapPlayers();
				tree = new Tree(tree.state, false);
			} else {
				// Update the root of the tree to the move corresponding to our move
				tree = tree.treeAfterMove(bestMove);
			}
			
			isFirst = false;
			
			if(bestMove != -1) {
				playedMoves.add(bestMove);
			}
			
			return bestMove;
		}
		
		// Derived from Random.java, removed synchronization and other checks to improve performance
	    private long seed = System.nanoTime();
	    public int randomInt() {
	        seed = seed * 0x5deece66dL + 0xbL;
	        return (int) (seed >>> 16);
	    }

	    public int randomInt(int n) {
	    	// Not completely correct, as results are a little biased, but good enough for our purpose
	    	// We shift by 16 because the higher bits provide higher quality randomness
	    	return (randomInt() >>> 16) % n;
	    }
		
	    // Get a move from the opening book based on the moves played so far
	     // Returns either the move from the opening book, or 0 if the opening book does not contain the given move sequence
		private int getOpeningMove(List<Integer> moves) {
			Object[] root = openingBook;

			// Recursively go through the opening book for every move played so far
			for(int i = 0; i < moves.size() && root != null; i++) {
				if(root.length > 1) {
					// There is a child opening book, update the root to this child
					root = (Object[]) root[moves.get(i)];	
				} else {
					// There is no child opening book, the move sequence is not in the opening book and we are done
					root = null;
				}
			}

			if(root != null) return (Integer) root[0];	// The move sequence is in the opening book, return the move from the opening book
			return 0;									// The move sequence is not in the opening book, return 0
		}
		
		// This class encodes a game state
		private class GameState {
			// The moves that can still be played in this state, up to index 'end' defined below
			private byte[] remainingMoves;	
			
			// The position of a given move in the remainingMoves array, i.e. positions[i] is the position of move i in the remainingMoves array
			// This array is used to allow O(1) removal of moves from the remainingMoves array 
			private byte[] positions;	
			
			// Moves in remainingMoves starting from index end have already been played 
			private int end = POSITIONS;
			
			// Bit sets encoding the board state
			private long myMovesLeft, myMovesRight;	// Moves played by me
			private long opMovesLeft, opMovesRight; // Moves played by the opponent
			
			// Constructs the initial game state
			public GameState() {
				remainingMoves = new byte[POSITIONS];
				positions = new byte[POSITIONS + 1];
				for(int i = 0; i < POSITIONS; i++) {
					remainingMoves[i] = (byte) (i + 1);
					positions[i + 1] = (byte) i;
				}
				end = POSITIONS;
			}
			
			// Copy constructor
			public GameState(GameState other) {
				this.remainingMoves = Arrays.copyOf(other.remainingMoves, other.end);
				this.positions = other.positions.clone();
				this.end = other.end;
				this.myMovesLeft = other.myMovesLeft;
				this.myMovesRight = other.myMovesRight;
				this.opMovesLeft = other.opMovesLeft;
				this.opMovesRight = other.opMovesRight;
			}
			
			// Swaps the moves done by the players
			public void swapPlayers() {
				long mML = myMovesLeft;
				long mMR = myMovesRight;
				myMovesLeft = opMovesLeft;
				myMovesRight = opMovesRight;
				opMovesLeft = mML;
				opMovesRight = mMR;
			}
			
			// Sets the move at the given index as unavailable for playing
			// Swaps the move at the given index in remainingMoves with the move at remainingMoves[end - 1] and reduces end by one
			private void swapOut(int index) {
				end--;
				swap(index, end);
			}
			
			// Sets a given move as unavailable for playing
			private void remove(int move) {
				swapOut(positions[move]);
			}
			
			// Swaps two entries in the remainingMoves array
			public void swap(int i, int j) {
				int temp = remainingMoves[i];
				remainingMoves[i] = remainingMoves[j];
				remainingMoves[j] = (byte) temp;
				
				// Update the positions of the entries
				positions[remainingMoves[i]] = (byte) i;
				positions[remainingMoves[j]] = (byte) j;
			}
			
			// Updates the state with my move
			public void updateMyMove(int move) {
				remove(move);
				if (move < 64) {
					myMovesLeft |= 1l << move;
				} else {
					myMovesRight |= 1l << (move - 64);
				}
			}
			
			// Updates the state with an opponent move
			public void updateOpMove(int move) {
				remove(move);
				if (move < 64) {
					opMovesLeft |= 1l << move;
				} else {
					opMovesRight |= 1l << (move - 64);
				}
			}
			
			// Monte carlo sampling with the all-moves-as-first (AMAF) heuristic
			public AmafPlayout sample(final boolean myMoveAtStart) {
				AmafPlayout result = new AmafPlayout();
				
				result.samples += SAMPLES;
				long _cML, _cMR;	// The moves done by the current player 
				long _oML, _oMR;	// The moves done by the opponent of the current player
				if (myMoveAtStart) {
					_cML = myMovesLeft;
					_cMR = myMovesRight;
					_oML = opMovesLeft;
					_oMR = opMovesRight;
				} else {
					_cML = opMovesLeft;
					_cMR = opMovesRight;
					_oML = myMovesLeft;
					_oMR = myMovesRight;
				}
				
				final boolean myMoveAtEnd = myMoveAtStart ^ ((end & 1) == 1);	// Is it my move at the end of the game?
				int[] play = new int[11];	// Stack that encodes possible moves that can be played based on patterns
				
				// Perform the given number of sample games
				for(int m = 0; m < SAMPLES; m++) {
					// The moves done by the current player 
					long cML = _cML; 
					long cMR = _cMR;
					
					// The moves done by the opponent of the current player
					long oML = _oML;
					long oMR = _oMR;
					
					int end = this.end;		// We use a copy of end to see which moves we can still do in this simulation run
					int lastMove = 0;		// The last move done by the opponent

					while(end > 0) {	 
						int move = 0;
					
						// Respond to the last opponent move based on patterns
						if(lastMove != 0) {
							int pc = 0;							// Index pointing to the top of the 'play' stack
							long[] ps = patterns[lastMove];		// Patterns that we have to apply
							for(int i = 0; i < ps.length; i += 4) {
								// Check if pattern matches
								if((ps[i] & cML) == ps[i] && (ps[i + 1] & cMR) == ps[i + 1] && (ps[i + 2] & oML) == 0 && (ps[i + 3] & oMR) == 0 && !isSet(cML, cMR, (int)(ps[i + 3] >>> 48))) {
									// Pattern matches, add the move corresponding to this pattern to the play stack
									play[pc++] = (int)(ps[i + 3] >>> 48);
								}
							}
							
							if(pc > 0) {
								// Select a random move from the play stack
								move = play[randomInt(pc)];
							}
						}
						
						// If the patterns did not result in a move, do a random move
						if(move == 0) {	
							move = remainingMoves[randomInt(end)];
							
							// Bias moves early in the game away from the edges, the idea is that more patterns will develop than fully random play
							if(end > 96) {
								// At the beginning of the game (first 10 moves), only play in the middle of the board
								while(edgeDistance[move] < 2) {
									move = remainingMoves[randomInt(end)];
								}
							} else if(end > EDGE_BIAS_THRESHOLD) { 
								while(edgeDistance[move] < 1) {
									// Avoid moves at edges early in the simulation
									move = remainingMoves[randomInt(end)];
								}
							}
						}

						// Remove the chosen move from available moves
						swap(positions[move], --end);

						// Add the move to current player
						if (move < 64) {
							cML |= 1l << move;
						} else {
							cMR |= 1l << (move - 64);
						}
						
						lastMove = move;
						
						// Swap players
						long cML_ = cML;
						long cMR_ = cMR;
						cML = oML;
						cMR = oMR;
						oML = cML_;
						oMR = cMR_;
					}
					
					// Did we win?
					// 1: we won
					// 0: we lost
					int win = myMoveAtEnd == winner(cML, cMR) ? 1 : 0;
					
					// Update the AMAF playout result
					result.wins += win;
					for(int j = 1; j < POSITIONS + 1; j++) {
						if((myMoveAtEnd == isSet(cML, cMR, j))) { // We have set j
							result.mySamples[j]++;		// Our samples with this move
							result.myWins[j] += win;	// Our wins with this move
						} else {
							result.opSamples[j]++;		// Our samples when the opponent played this move
							result.opWins[j] += win;	// Our number of wins when the opponent played this move
						}
					}
				}
				
				return result;
			}
			
			// Is a given position set in the bitset given by l and r?
			private final boolean isSet(long l, long r, int i) {
				return (i < 64 && ((1l << i) & l) != 0) || (i >= 64 && ((1l << (i - 64)) & r) != 0);
			}
			
			// Determine the winner given a board encoded in the bitset given by l and r
			int[] todo = new int[POSITIONS];	// Stack for depth first search
			public boolean winner(long l, long r) {
				// l and r encode the positions on the board that have been played by us.
				// Note that we update l and r in this method to remove nodes that we have already seen in the DFS search
				// I.e. l and r encode the nodes played by us that we have not yet processed
				
				int corners = 0;	// The corners that we have captured
				
				// Do a depth first search from the positions along the edge to find the edges connected from this position
				for(int i : edge) {
					if(isSet(l, r, i)) {	// Did we play this move?
						int top = 0;		// Index for the top of the stack
						todo[top++] = i;	// Start the search from position i
						
						int edges = 0;		// The edges connected by the current component
						while(top != 0) {
							// Process the node on the top of the stack
							
							int current = todo[--top];		// Pop one position from the stack
							edges |= Lynx3.edges[current];	// Update the edges reachable
							
							// Add neighbours of the current node to the stack
							for(int j = 0; j < neighbours[current].length; j++) {
								int n = neighbours[current][j];
								if(isSet(l, r, n)) {	// Is this node played by us?
									// Mark the neighbour as processed
									if (n < 64) {
										l &= ~(1l << n);
									} else {
										r &= ~(1l << (n - 64));
									}
									
									// Add the neighour to the top of the stack
									todo[top++] = n;
									
									// Optimization: we do not have to check the next neighbour
									// Proven by hand waving and the absence of a counter example
									j++;
								}
							}
						}
						
						// Update the corners captured by the connected edges 
						corners |= cornerSet[edges];
						
						// If we won with the given captured corners, we can stop
						if(win[corners]) {
							return true;
						}
					}	
				}
				
				// We did not win
				return false;
			}
		}

		// Implementation of a tree node for monte carlo tree search (MTCS)
		private class Tree {
			private GameState state;	// The game state at the current node
			private boolean myMove;		// Is it my move? (note that this could also be passed around instead of storing it in tree nodes)
			
			// Statistics gathered about child nodes based on the AMAF heuristic
			private Statistics statistics = new Statistics();
			
			// A mapping of moves to child nodes
			private Map<Integer, Tree> children = new HashMap<Integer, Tree>();

			// Constructs a tree node given a state and whether it is my move
			public Tree(GameState state, boolean myMove) {
				this.state = state;
				this.myMove = myMove;
			}
			
			// Constructs a child node from a parent node and a given move
			public Tree(Tree parent, int m) {
				state = new GameState(parent.state);
				myMove = !parent.myMove;
				if(parent.myMove) state.updateMyMove(m);
				else state.updateOpMove(m);
			}
			
			// Gets the child node of this node for a given move
			public Tree treeAfterMove(int move) {
				if(!children.containsKey(move)) {
					return new Tree(this, move);
				}
				return children.get(move);
			}
			
			// Computes the best move given some amount of computation time
			public int findBestMove(double time) {
				long start = System.nanoTime();
				
				// Call expand() as long as we have time
				do {} while(expand() != null && System.nanoTime() - start < time * 1000000000);

				// Select the move with the highest number of samples
				int bestScore = -1;
				int bestMove = state.remainingMoves[0];
				for(int i = 0; i < state.end; i++) {
					int move = state.remainingMoves[i];
					if(children.containsKey(move)) {
						Tree child = children.get(move);
						
						int score = child.statistics.samples;
						if(score > bestScore) {
							bestScore = score;
							bestMove = move;
						}
					}
				}

				return bestMove;
			}
			
			// Expands the tree by creating the most promising child node, playing a monte carlo playout in this child node, and updating the statistics in all parent nodes
			public AmafPlayout expand() {
				// If there are no moves remaining in this node, we are done
				if(state.end == 0) return new AmafPlayout();
				
				AmafPlayout result;
				int selected = 0;
				
				// Select the best node for the current player
				if(myMove) {
					// Select the node with the highest win rate
					double bestScore = -1.0;
					for(int i = 0; i < state.end; i++) {
						int move = state.remainingMoves[i];
						
						// Compute the win rate based on the AMAF heuristic
						double score = ((double) statistics.amafWins[move]) / statistics.amafSamples[move];
						
						// If we have actual samples of this node available, we do a linear interpolation of the
						// AMAF score with the actual samples based on the ALPHA parameter (alpha-AMAF)
						if(children.containsKey(move)) {
							Tree child = children.get(move);
							score = score * ALPHA + (((double) child.statistics.wins) / child.statistics.samples) * (1.0 - ALPHA);
						}
						
						// If there is no data at all available for this node, we must investigate it
						if(statistics.amafSamples[move] == 0) {
							score = 100.0;
						}
		
						if(score > bestScore) {
							bestScore = score;
							selected = move;
						}
					}
				} else {
					// Select the node with the lowest win rate
					double bestScore = -1.0;
					for(int i = 0; i < state.end; i++) {
						int move = state.remainingMoves[i];
						
						// Compute the win rate based on the AMAF heuristic
						double score = ((double) (statistics.amafSamples[move] - statistics.amafWins[move])) / statistics.amafSamples[move];
						
						// If we have actual samples of this node available, we do a linear interpolation of the
						// AMAF score with the actual samples based on the ALPHA parameter (alpha-AMAF)
						if(children.containsKey(move)) {
							Tree child = children.get(move);
							score = score * ALPHA + (((double) (child.statistics.samples - child.statistics.wins)) / child.statistics.samples) * (1.0 - ALPHA);
						}
						
						// If there is no data at all available for this node, we must investigate it
						if(statistics.amafSamples[move] == 0) {
							score = 100.0;
						}
						
						if(score > bestScore) {
							bestScore = score;
							selected = move;
						}
					}
				}
				
				if(children.get(selected) == null) {
					// If this child does not exist, create it
					Tree child = new Tree(this, selected);
					children.put(selected, child);
					
					// Evaluate this node with monte-carlo sampling
					// The result is a AmafPlayout instance containing number of wins, samples and AMAF statistics (number of wins and samples for all other moves played)
					result = child.state.sample(child.myMove);
					
					// Update the statistics of the child node
					child.statistics.add(result, child.myMove);
				} else {
					// The child exists, recursively expand this child
					result = children.get(selected).expand();
				}
				
				// Update the statistics of this node
				statistics.add(result, myMove);

				return result;
			}
		}
		
		// The result of a set of AMAF playouts (as constructed by)
		class AmafPlayout {
			int samples;		// The number of samples performed
			int wins;			// The number of times we won
			
			int[] mySamples = new int[POSITIONS + 1];	// mySamples[i] is the number of samples where move i was played by me 
			int[] myWins = new int[POSITIONS + 1];		// myWins[i] is the number of samples where move i was played by me and I won
			int[] opSamples = new int[POSITIONS + 1];	// opSamples[i] is the number of samples where move i was played by the opponent 
			int[] opWins = new int[POSITIONS + 1];		// opWins[i] is the number of samples where move i was played by the opponent and I won
		}
		
		// The statistics stored in a node
		class Statistics {
			int samples;	// The number of times this node has been sampled
			int wins;		// The number of samples where we have won

			int[] amafSamples = new int[POSITIONS + 1];		// amafSamples[i] is the number of times move i was played in a monte carlo game
			int[] amafWins = new int[POSITIONS + 1];		// amafWins[i] is the number of times move i was played in a monte carlo game, and we won
			
			// Update the statistics with a given playout result
			public void add(AmafPlayout playout, boolean myMove) {
				samples += playout.samples;
				wins += playout.wins;
				
				if(myMove) {
					// If it is my move, add the statistics for my moves
					for(int i = 1; i < POSITIONS + 1; i++) {
						amafSamples[i] += playout.mySamples[i];
						amafWins[i] += playout.myWins[i];
					}
				} else {
					// If it is the opponent move, add the statistics for the opponent moves
					for(int i = 1; i < POSITIONS + 1; i++) {
						amafSamples[i] += playout.opSamples[i];
						amafWins[i] += playout.opWins[i];
					}
				}
			}
			
			public Statistics clone() {
				Statistics result = new Statistics();
				
				result.samples = samples;
				result.wins = wins;
				result.amafSamples = amafSamples.clone();
				result.amafWins = amafWins.clone();
				
				return result;
			}
		}
	}
}
